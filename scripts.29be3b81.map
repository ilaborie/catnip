{"version":3,"sources":["scripts/models/utils.ts","scripts/models/Frame.ts","scripts/models/LocalVariables.ts","scripts/models/OperandStack.ts","scripts/models/Frames.ts","scripts/parser/impl/constant-parser.ts","scripts/models/input.ts","scripts/models/instructions/flow.ts","scripts/models/instructions/math.ts","scripts/models/instructions/objects.ts","scripts/models/instructions/others.ts","scripts/models/instructions/stacks.ts","scripts/models/instructions/index.ts","scripts/parser/impl/instruction-parser.ts","scripts/parser/sample.ts","scripts/templates/inputs.ts","scripts/templates/locals.ts","scripts/templates/stack.ts","scripts/templates/frame.ts","scripts/index.ts"],"names":[],"mappings":";;;;AACA,SAAA,IAAA,GAA2C;AAAA,QAAnB,MAAmB,uEAAF,EAAE;;AACvC,UAAM,IAAI,KAAJ,sBAA4B,SAAS,OAAO,MAAhB,GAAyB,EAArD,EAAN;AACH;AAFD,QAAA,IAAA,GAAA,IAAA;ACIA,IAAA,UAAA,QAAA,SAAA,CAAA;;IAEA;AAMI,ICXJ,eDWyB,MAArB,EACa,IADb,EAEW,QAFX,EAGa,IAHb,EAIa,UAJb,EAKa,KALb,EAMa,MANb,EAMmC;AAAA,ACXnC,4BAAY,IAAZ,EAAwB;AAAA,ICN5B;AFWyB,AGbzB,ADSI,AGCJ,ADPA,IDHA,AEUY,ADPN,ICON,KLGyB,CGbzB,KHayB,EIVF,CJUE,AGbzB,IDSgB,EFIS,EEJrB,AENE,CDHN,CAAA,ADS4B,YENL,CAAC,CAAD,EAAwB;AJW9B,AGZjB,AFCY,ACMgB,AGC5B,ADNI,CCMJ,GFRA,ICEU,GCME,ELIK,ACXL,EIOZ,ELIiB,AKJD,CJPJ,EDWK,CCXY,EED7B,AFCY,CDWK,CIVU,MDF3B,kBAAA,CAAA,+BCEI;AJWW,AGZf,AFMQ,AIEJ,ACVJ,AFII,IDFJ,AGFA,IFIU,CCMN,GDNU,CJUC,ACNF,CIET,ACVJ,ILQQ,GDMO,AGZf,AFMqB,CKRrB,ENce,AKJX,GJFuB,AGJE,CCMzB,CFRJ,AEQI,EDNU,CJUC,ACNM,AKRrB,AFIkC,CHID,AIE7B,ACVJ,AFIc,CAAV,GHIiB,EAAkB,IIEnC,EFRJ,AFMoD,CENpD,GFMuC,CAAlB,CAAb;ADOS,ACNZ,ACNO,AGQR,ACTJ,aNaiB,AEZL,IFYK,GAAA,EEZL,EFYK,CEZO,CAAZ;AFaK,AEPT,AGGJ,ACRS,ACJb,AHE+C,IDG/C,AILA,IDIa,CDQT,ILIa,AEPJ,CGGT,AEZJ,ILSQ,CGGJ,EHHiB,CKTrB,AHK8C,CJW7B,AKJb,CAAA,ACRS,ENYI,CEPU,AILyB,CDQhD,ADPgD,CEDvC,GJKQ,AKTrB,AHK8C,CFIb,AGG7B,AEZJ,AHKyD,GJWxC,CEPI,CEJyC,CFIvB,CEJO,CAHC,IFOK,IAAb,CAAlB,CAAb;AFQS,AGTb,ADEC,AGGD,ACHJ,ACPA,AHD+C,IEQzC,KDGF,ILIa,CKJb,ILIa,AMPgB,EHFR,AEKrB,CLIa,GKJb,CAAA,CLIa,GKJb,GFLA,EACa,CEIb,MFLA,EAC6C;AHShC,AGTgC,AEK7C,ACHA,ACNS,ACLb,AJE+C,IIF/C,IFWQ,ACNK,AHAF,CCSP,EDZ2C,EJgB9B,CKJb,AGdJ,KRkBiB,CMPR,CDGL,ACHI,CNOS,AQlBjB,CFWoB,CAAZ,ACNK,CFST,CAAA,CETgD,CPanC,CObJ,CFST,EGdJ,CAAA,IHcI;ALIwC,AKHxC,ACJI,ACJR,ACLa,AJAkC,IGKzC,ICLO,AJGG,CCUZ,KAAA,ADb2C,CESJ,KAAK,CAAxC,CDIJ,IAAA,CAAA,AERyB,ACLhB,CPSE,EOTwC,CPS/B,AIIpB,CGbS,IDKP,GFQF,iBERyB,CAAC,IAAD,EAAa,GAAb,EAA0B,GAA1B;AJCJ,AFIjB,AIIJ,ACLI,ACJqB,ACH7B,ACFA,ALA+C,KEQd,GENjC,AJCwB,CCWpB,EET2G,CHLhE,CDMtB,CEQrB,KJJW,CIIX,IJJgB,AIIhB,CFRqB,AEQrB,EGZJ,CLIyB,AKJL,CPQL,AIIX,CJJsB,CAAX,CAAP,GIIJ,EGZJ,GLIyB,AKJO,UAAC,IAAD;ALKf,AFIZ,AIID,ACLA,ACJA,ACJ4B,ACAnB,ALFkC,QEUvC,AGRK,ALCiB,CCY1B,CDf2C,CIEG,ELKjC,CEQb,IEV2G,EJE9F,AGGR,CDKL,ACLI,EHHS,AGGG,CAAZ,CDKJ,AIbS,CJaT,EIbiD,CPQrC,CCHC,AEQb,AIbS,MPQe,CGKxB;AFXgB,ADOZ,AGKP,ACNO,ACHJ,ACJA,AELJ,ANE+C,CCO/C,EAAY,CKTZ,INKkC,ECItB,EDPmC,CDI3B,CIGV,ACJA,AELV,CJY2C,EJC9B,CGJD,CFHQ,AGM2B,CAAvC,EHN8B,ADO9B,AGJI,AEAF,AGTV,CRamB,CCPC,CKF8B,EHKtC,CHIY,IKJd,AGTV,CHSqB,AGTrB,ELSY,EHIJ,AKJE,EFAE,EHIyB,AKJR,CFAb,EAAJ,AEFmG,CFE/G,CHIQ;ACHA,ADIA,AGMR,ACRQ,ACFJ,ACJA,AEJS,ANAkC,KEQd,GIRpB,ANG2B,CCexC,CDlB+C,EDQjC,GIAH,ACJA,ENQE,EGMb,CAA2B,IAA3B,CFV2B,AORd,CRYL,AGM6B,EKlBgB,EHQzC,ACJA,AEJC,GPQsB,EIAxB,ACJA,CLIgB,CAAY,AIAX,ACJA,ERcD,IGVA,CHUW,AGV9B;AHWA,AGVA,ADIH,AGMD,ACRA,AKbJ,AJWQ,ACJA,AEHR,ICJA,ADIM,IJSE,IHFI,AEUA,CFVC,AQXb,GXqBc,AKAV,AEVU,ACJA,CEHK,GJSV,ACFS,CDEV,AKbR,CXqBoB,CGVZ,AGEY,CAAZ,AENc,CLIG,CIAD,AGPlB,CViBmB,CCNV,CUff,AHO2B,CGP3B,AHOsB,CPQI,AMJR,ACJV,CDIsB,GAAZ,CGPC,CViBC,AOVZ,AGPY,CViBgB,ACNE,GSXnB,CViBC,CACP,AUlBmB,IViBZ,CACF,AUlBC,UVkBA,IAAD;AAAA,AGVN,AFIJ,AIMA,ACTA,AKZR,AJWQ,ACJA,AEJW,ANEf,IOLJ,IPKU,GMFmD,ELkBhD,AMrBb,ELY2C,CCD7B,AHNI,CHUL,CEJK,AEUA,AGdJ,EFKkC,ACD9B,CFUV,ACTA,AKZR,CRWsB,AFId,CDMoB,ACNT,AORX,CPQA,AORY,CJFO,CGMH,CJAN,CHUe,ACNT,AORhB,CGPR,AHOyB,CGPzB,CJWkB,ACJS,AJFT,CGMY,CNItB,AGV2B,EGMjB,AHNA,CJgBU,AIhBxB,CGMI,ACJyB,IRca,GAA5B,CQde,IAAA,CAAK,KLI1B,GKJa,EAAuB,YAAvB,EAAjB;ARcU,AGTT,AFIJ,AIMO,ACVJ,AKXR,AJWQ,ACJA,AEJJ,ANEA,IOLJ,CLQiC,GFHvB,KJcU,CAAZ,EWnBR,APKmB,EGML,ACJA,AEL+C,CLmB1C,EDhBK,CCgBZ,AGdJ,CDIA,AHNW,COLnB,AJWoB,EHNS,EGMrB,AHNJ,CGMqB,EAAE,IIX3B,CAAA,KJWyB,EAAQ,OAAO,IAAI,EAAE,KAAN,EAAa,EAAE,KAAf,CAAf,EAAjB;APUA,AGTA,AEUA,ACVJ,AKXJ,AJWQ,ACJH,AEJD,ANEA,IOLJ,ILWQ,GFNG,CDMG,CEUD,ADhBD,CMFC,CCHb,CXoBY,CAAC,CKCK,AEVJ,EPSN,AMTC,CAAD,CNSU,AKCV,AEVA,AGRK,CJQO,AKXpB,CRW0B,AGAlB,CFNG,EAAQ,CDMW,EDGhB,EQXD,CCHb,ADGwB,CCHxB,ERW8B,CORjB,ANEF,CMFP,CNEqB,EDMC,CAAU,IAAV,EACd,GCPD,CMF2B,CNElC,CDMsB,EAEd,COZiD,UPYtC,IAAX,CAAgB,CAAhB,EAAmB,QAFL,EAGd,EAHc,EAId,UAJc,EAKd,IAAI,eAAA,YAAJ,CAAiB,WAAW,KAA5B,CALc,EAMd,IAAI,iBAAA,cAAJ,CAAmB,WAAW,MAA9B,CANc,CAAlB;AHUI,AGHJ,ADHA,AGOI,ACXJ,AKVR,AJWK,ACX6C,AEG9C,ANEH,ASTD,CTEA,GOEA,AEJA,CLIgC,QLiBnB,EGP8B,AKV3C,ADGW,CRWG,GCGN,AEIW,ACX4B,CHO3B,ADHF,AIJV,ENUU,AKCN,CMrBZ,CRiBQ,AUrBR,CVqByB,ADHF,CFMD,IENJ,AQXN,CViBM,AENW,CWlB7B,CFIA,CRiBQ,AQjBR,CDGW,CRWuB,CQXN,QRWV,CAAV,UWlBR,CAAA,ebwBkE,GAAhD,CAAN;AACH,AGHJ,ADHG,AGOA,ACZA,AKRR,AJC+G,ACH/E,AEIxB,ANGK,ASVb,CLGA,GGEM,AELN,CPSiC,ACHJ,GHIhB,KCeA,IHPA,CGOK,AKlBJ,ICFO,CNoBb,AKlBA,CAAY,ERWZ,AERK,CSVb,CZEY,ASKJ,CCFa,ADEI,ANG6B,EMH3B,ICFN,AELrB,CFKqB,EAAA,EACd,CDCkB,EAAQ,MCD1B,MDCkB,EAAjB,KGPR,CAAA,GFKqB,EAEd,UAAA,mBAFc,EAGd,OAAA,gBAHc,EAId,OAAA,gBAJc,EAKd,SAAA,iBALc,CAArB;AXoBQ,ACtBA,ACgBA,AGOI,ACZR,AKDJ,AJP6B,ACM7B,AEJQ,ANGJ,ASTJ,ACFa,CPMb,GMJM,IPYE,AKDA,AHDR,AMZa,CVUyC,EOGtD,ODLc,CViBC,ACtBA,ACgBA,AGOI,CHPX,AILC,CAAD,AKDW,CXYX,AKCI,AKlBJ,CJMY,CLXA,AKWZ,EFHE,AUXG,CNYb,CGC0B,AHDN,CPTZ,AaH0B,EVUoB,COGnC,CAAY,APFR,MUXY,CNYnC,GAAmC,KGChB,EAA6B,CGbd,ENYE,GGCpC,CHDmC,2hDKVnC;AbwBK,ACtBA,ACgBA,AGOG,ACbA,AKCK,AJEb,ACLmC,AEH9B,ANGG,ASsBR,AClCkC,IPiB5B,AMiBA,IFnBO,GHHwC,EHexC,ECb8B,AFF5B,GCeG,GCb+B,AFF5B,CEEb,EDaA,CMZK,CJEe,AHLb,CAAY,COGM,GPHlB,EACF,EGIP,CHLS,CACE,COEiB,OAAD,EAAkB,APFjC,CAAD,GOEgB,EAA8C,CJEnD,CAAC,IAAD,EAAa,GAAb,EAA0B,GAA1B,mCOZ1B,aAAa,GAAb,CAAiB,UAAC,QAAD,kGD6BnB;ARNY,ACdJ,AKEJ,AJCwB,ACJxB,AEVyD,ANU5C,AQdjB,ACmDA,AC7CmB,ACJnB,IHFA,ACmDM,AEjDA,CLEa,GCaT,GJCyF,CIDrF,EHHJ,KHeS,ADfK,EAAE,AQd1B,CP6BY,CU3Ba,EXYD,EAAP,COGa,AHJuB,CIbrD,GGEM,GJeQ,CAAV,YIfqB,CAAC,EDKG,GCLJ,EHFzB,CAAA,GEOsC,KADnB,4CAES,SAAS,IAFlB,6CAGU,SAAS,KAHnB,yFD6CnB;ARrBQ,ACpByB,AKQ7B,AJCA,ACJA,AEXe,ANUF,AQZjB,ACuDa,ACnDM,ACJM,CTQzB,AINA,GEFA,CEIE,EAIS,CHQH,AEuCK,CFvCT,APLW,EOKJ,APHE,AUTX,ACHE,CDOY,CToBH,CO5Bb,CJaW,CMTT,CVOa,AUZmB,CT6BhB,AEZiF,AHH/E,ES0CP,ER3BL,AO5BR,CCuD4B,KT1CP,CAAD,CIAR,CLSG,IKTJ,EAAiB,IK0CA,CDvD5B,AGCgC,CHDhC,KGCsC,IAAlC,OFsDwB,CAAmB,KAAnB,CAAyB,KEtDC,CFsD1B,CAAf,IEtD+C,KAAxD,WAAkE,MAAM,KAAxE,2CADqB;AZuBjB,AEMI,ACbZ,AKCQ,AJCJ,ACJI,AEHR,ANEoB,AS4CP,AC1DqB,ACCT,ACAzB,CFDa,ACCb,GTgBM,AILA,AMXA,IHyDO,MNvCH,AMuCG,CPzCI,AKCF,CRMD,AKTA,CGGG,ADNE,AG8CG,ER5BH,ADhBQ,EOIZ,AEwCW,CR5Bd,AMZJ,AJCE,CSlBe,CVgBnB,AEFgB,AK2CA,CT5CW,CMF3B,CNEc,AS6Cf,Eb/BW,AQbW,CAAL,AK2CA,CVlCO,ADFd,AMPP,AK4CC,CP1CQ,ACEP,ASlBJ,CVgBY,ACEG,GJKa,AOZf,CJKF,ACEP,AGPU,EVgBa,AMXD,ECEH,AGPV,CPYU,AGPZ,AOyCK,CVlCmB,AOZT,CHKmE,AM0C7E,IVnCwB,AOZ3B,AMXM,CAAC,KbuBe,AavBhB,CbuB4B,MAAZ,GAAqB,CAAjC,AUmCP,CVnCd,WUmCc,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,aAA1C,CADA,EAEjB,GAFiB,CAEb,MAFa,EAEL,qBAAA,YAAA,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,QAA1C,CAFK,CAAT;Ab7BL,AGNO,ADAP,AGQA,ACdS,AKEZ,AJCD,ACJI,AEJW,ANEC,AUCpB,ACVa,ACJY,IJGzB,IGCa,CXOE,EEK0D,AILT,ANGnD,AYbT,EX6BS,CDnBE,CGQJ,AHLM,CJcL,AGJI,EEME,AGfJ,CNOC,CalBF,GV0BL,AU1BoB,CfwBpB,AENY,CERF,CJcI,AGNP,ACRE,GDUwB,ADF1B,CAAW,AKHd,GQfiB,CPWrB,CNOuB,AKHpB,ACJoB,EDIH,EQfA,CPWpB,CLOO,CAEC,AavBgB,EdqBjB,CAAP,GcrB8B,IbqBvB,AarBX,mBAAkD,MAAM,KAAxD,WAAkE,MAAM,KAAxE,2CADqB;AhB6Bb,AGPG,ADCV,AGQO,ACdR,AKGA,AJAI,ACJH,AEJD,ANEa,AQTb,AKNJ,AHgBa,ACXe,ACJH,CAAzB,GCDA,IHgBa,EHKH,ILHA,AKGI,CMrBd,CdyB4B,AIJd,EGTkD,CLoB7C,AMXT,APNc,CGMN,CPSD,CKEL,ACdF,CWlBV,CduBe,AWPF,EREH,ACGc,CJIiB,AGP1B,AQFiB,CFVP,ENWgD,CCIvD,CAAY,CIAC,ACf3B,AKNJ,CbeuC,AafvC,CjB8BY,AOTM,AHNM,AQRC,CZuBO,AIff,CGMT,AOLyB,EXOlB,CAEa,AQJlB,CCfN,AEU4B,EFRP,AEQqC,CdclD,IGPG,GWPiB,CFV5B,CEUsF,CFPjE,IDYrB,ACfA,EAGgD,8BGA1C,OAAO,IAAP,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,IAAlC,CAAuC,IAAvC,CAJkB;Af0BhB,AC/BZ,AIiCQ,ACdJ,AKGH,AJAO,ACV6C,AEEjD,ANCa,AQNmC,AKRpD,AHgBE,ACZ0B,ACAf,CLUA,AIVA,GEJb,CTWmC,GPZnC,AaiBQ,AEZK,CZOE,CAAP,IMEK,CObb,CVqBc,EOLI,CEZL,CTiBK,CPSD,CC/BjB,ASca,AMTc,CCJ3B,EhBDA,CKmBoB,ACGI,COLhB,EdcI,AMd6D,ECKvD,CPSU,AOTE,AGRjB,AMTe,CNSJ,AObxB,CAAA,AHgBkB,CPKA,AOLC,EPKX,AGRK,AMTc,CNSvB,CTdJ,AaiBkB,CdcN,YUjB0B,KAF0B;AQVhE,AlB8BS,AGND,AEQI,ACdR,ACGI,ACX2B,AEG/B,ANCC,AadL,AHekB,AEZS,CRO3B,GUVA,ADAA,SjB2BQ,CiB3BR,CCAA,AZkBW,AILA,AIEuC,CXSpC,AWRV,ETgBc,AEXJ,CPSC,EcdN,CTgBa,AYhCtB,CCAA,AXqBQ,CAAY,GFWF,CEXV,CAAiB,CJGG,AGNhB,AILA,CHQe,AUrB3B,CAAA,AHgBI,CAAiB,EREV,AILA,EJKiB,AILA,AIGxB,GIhBJ,CAAA,AXqByB,EJGgB,AIHR,MFWc,CEXP,AOLJ,GTgBlB,CAAN,AEXgC,COLH,CPKK,KJGtC,AIHgC,CAAf,EAAjB,EOL4B,CAAiB,IAAjD,GAA0D,EADZ,EAE9C,UEVM,GFUO,GEVD,EFUM,EEVZ,CAAW,GAAX,CAAe,CFUrB,GAA6B,UAA7B,EEVM,CFUoC,CEVH,CFQO,EAG9C,CEXM,CAAsC,IFQE,AERxC,CFWC,AEfgB,UFef,CAAD;AIhBX,AlB6BY,AGNJ,AEPJ,ACCI,ACGA,ACJR,AEJQ,ANN8C,AQJ7B,AKFzB,AHgBW,AEfgB,CZKd,AYLA,GEDb,ADAM,ITgBN,KIdyB,EMFzB,CZiBc,AILA,EHQA,AKlBW,AKFL,CHgBF,CdaA,AGNF,AGNE,CMfO,CLkBjB,CWpBR,AfuBQ,COXc,CIIE,CdaA,AMZA,AMfC,CJczB,AShBM,AHgBK,CZjBC,AMiBQ,EEJQ,CViBC,AMZX,CAAY,EHMF,CGNV,AILI,CAAY,EJKE,AWjBhB,CPYE,AOZD,CCArB,CAAA,AlB6BwB,AQbxB,AEJQ,CViBgC,CMZhC,CED4B,AShBhB,EjB6BI,AGNgB,CHMK,OAArB,AQba,CRagB,EGNzB,CAAwB,AKPhB,ERasB,EGNlD,gBHMgB,CAAZ;AkB5BZ,AlB6BY,AGNJ,ADxBA,AGgCP,ACdO,ACGH,ACL+B,AEH5B,AEViB,AKHL,AHgBT,IIfX,KJYkD,ENGI,AMA1B,EFbH,CMFzB,CJYkD,CRKpC,AQFmB,EJHnB,CRbC,AUGU,AEUyB,CRKhC,AQLA,CdiBD,CkB7BjB,ANEyB,ETqBL,ADxBA,AQaZ,CAAa,CJKG,EILhB,AEViB,CZ2Bb,AE9BJ,AQaiB,EJKP,CNYU,AMZE,EILtB,CPWA,AGNU,CHMc,AOXA,CViBC,CMZG,GYjBpC,AfuBQ,AOXA,CQZR,AfuBsC,CGN9B,INYoB,CAAgB,IAAhB,CAAqB,AiB5BrC,CdsBJ,KHM+C,AiB5BrC,CjB4BU,EAA8B,CiB9BtC,OjB8BR,QiB5BoB,MAAM,IAFlB,4BAGhB,SAAA,gBAAA,CAAiB,MAAM,UAAN,CAAiB,IAAlC,EAAwC,MAAM,QAA9C,CAHgB,YAIhB,QAAA,WAAA,CAAY,MAAM,KAAlB,CAJgB,YAKhB,SAAA,YAAA,CAAa,MAAM,MAAnB,CALgB;ACGpB,AlB4BS,AGND,ADxBH,AGcL,ACIQ,ACN2F,ACI/F,AEHI,AEViB,AKJL,AHaF,CGblB,GCGM,CXUsB,AOA1B,GTEF,KaZe,ANCU,CJaf,EFEI,CYhBK,CbYnB,AKDc,EPWE,CEVhB,CKDQ,AEViB,CTqBjB,CAAY,CSrBK,CMDN,AfsBG,CGNG,EEH6B,EHDtD,CaZe,CAAW,CNCD,KNeY,GYhBX,AZgBD,EAAiB,CAAjB,EAAoB,CAApB,CAAjB,GHMY,EetBL,AfsBP,EetBgC,SAAA,MAAzB,CAAf;AACA,AlB4BK,AGNA,AGNG,ACPoB,ACKxB,AEHC,AEVoB,AKIZ,AHQX,CPJF,OWTQ,ADKK,GCLb,CAAY,CNCa,CMDX,CVcH,EIbc,CNeX,EMfW,AKIZ,EXWL,CAAW,AWXS,CLJH,IMDb,EAAZ,AVcY,GSTiB,CXWC,CEFnB,EAAiB,CFET,CWXS,EXWS,AQAjC,KAAK,GAAL,CRAI,AQAK,UAAC,IAAD;AIdA,AZeR,ACGL,ACLQ,AEXwD,AEF3D,AKGuB,AHWf,IPIP,CGhBa,GQFN,GXkBA,GWlBA,EVaC,ASTZ,CCJoB,GXkBhB,IAAO,ACLS,CDKR,AUdZ,ECJqB,EVaI,CUbL,AXkBT,ACLS,CAAd,CUbgD,AXkB3B,IOHd,KPGF,EUdX,CAAmB,AHWE,IAAR,CADF,EGVe,YAA1B,CAD0B,0BHaA,KAAK,QAFpB,wCAGW,KAAK,WAAL,CAAiB,IAH5B,wCAIW,KAAK,IAJhB,wCGHL,OAAO,MAAP,CAAc,GAAd,CAAkB,UAAC,KAAD;ACVtB,AZMqE,ACW5D,ACJL,AEZW,AOSO,AHGb,CJZb,IJKiB,AQOb,EAOG,CIpBC,GXiByD,AUP5B,AHGjC,CAOQ,IIpBI,AJaZ,CAHF,CNGY,EUbV,EAAkB,CDU2B,KAAZ,CAAX,KTGlB,CAAuB,KAAvB;AUZA,AZKS,ACYb,ACJC,AEHL,AOD0B,AHczB,CRlBD,AQDa,EGKL,CPCF,CODmD,IAAjD,CAAsD,ECTlD,EXiBF,AURF,CARoB,CPSV,KQVV,CXiBE,EWjBc,CRUlB,CHOI,CAAK,GADkD,EWhBzC,AlB0BN,EUhBA,CAAC,IVgBY,AUhBb,EAAa,GQVP,CAAa,CRUnB,KQVM,CAAhB;AACA,AlB0BA,AMXR,ACEI,ACVkD,AEEpC,AOTU,CAAf,GXeP,CER8B,MEE2B,CQTjD,EXiBJ,EDFQ,EYfE,ElB0BZ,AOXyD,IPWzD,CAAK,AMXP,EYfuB,OZeX,CAAC,INWX,AMXU,CYfE,CAAuB,oBAAvB,CAAZ;AACA,AlB0BH,AExCL,AI4BkB,ACGd,ACXgC,AEGhC,CFHJ,ONpBA,GI4BkD,CYdtC,GXiBD,GGToD,CQRvD,ChBdR,EgBcsB,ChBdtB,OK+BY,EKnBG,EMEY,ChBd3B,AK+BW,EAAiB;AWhBhB,AfXZ,AGyBI,ACEwB,AGPxB,AEXI,QTTR,MAAA,AOoBa,GPpBb,EeWmB,ANFJ,CNemC,EIJrC,CQTD,AfXZ,ISSe,IAAA,CFWF,CAAW,AEXhB,CADO,CACQ,CLmBS,CGRnB,CAAT,IHQkC,MAAN,CAAa,EGRR,CHQL,CAAiB,GGVc,EHU/B,CADJ;AWfhB,AZcR,ACCwB,AGNxB,AEXC,eNgBM,AILA,CHOK,IWhBJ,AXegB,MWfhB,CAAO,GAAP,AZcA,AILA,KJKD,AILA,EJKiB,AILA,IHOZ,IADY;AWdnB,AZcD,ACAoB,AGLpB,SQZA,OXkBc,AGNR,EJKA,GCAc,CDApB,CAAW,CILG,GJKd,GILoB,MAAN,CAAa,GAAb,CVgBM,AUhBW,CHMjB,IGNA,CHKM,AGLpB,CVgB8B;AkBxBjC,AlByBG,AMXH,AILG,KQhBJ,MAOO,ORSG,EVgBN,GUhBA,CVgBA,AUhBY,CVgBP,GUhBL,CAAiB,EAAE,UAAF,EAAQ,MVgBzB,MUhBiB,EAAjB;AQRA,AlByBH,AMhB6C,ACK1C,AGLA,KJAU,WYTF,EXcF,AGLA,EQTN,CAAa,CRSb,EHKA,CAAa,GAAb,CAAiB,KAAjB,EAAwB,EAAE,MWd1B,EAAsC,EXcd,CWdxB,CXcgC,OAAO,QAAQ,SAAvB,EAAxB;AWbH,AZQa,ACMV,AGLH,CJDL,iBCMc,IAAN;AWbP,AZcD,ACAK,AGb0D,CQZlD,IRYK,GJalB,gBAAA,CAAiB,SAAjB,GAA6B,UAAC,IAAD,EAAgB;AYZ7C,AZaI,ACR6D,AGN/C,AELlB,CFKA,GELM,CLWO,EWLN,CZaG,KYbV,EZaiB,CYbD,QAAA,AZaU,AMnBA,KNmBK,CYb/B,AZa0B,CAAT,EAAkB,AMnB7B,ENmBW,CAAb,KNSwB,OAAU,EY5BZ,CAAC,IAAD,EAAsC;AZ6BxD,AMTJ,ACTS,AGIb,AEdI,CLUJ,OKVU,GNmBC,SNSH,AMTY,INSZ,AMTG,CNSE,CMTa,GMnBK,CNmBpB,CAAP,kBNSI,6BY5BJ;AZ6BC,AMTJ,ACAD,AGLA,AEdI,CNgBJ,AIFC,OEdS,CFcT,IAAA,AEdc,CFcT,GAAN,EAAW,QAAA,IAAA,CAAK,AEdkB,IFclC,AEde,CAAwB,CFcjB,GEdP,CAAX,IFckB,IAAA,CAAK,KAA3B,EAAkC,QAAA,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,UAAC,IAAD,EAAS;AJOhE,ACDA,AGLI,AEdA,CLmBH,ODCD,AINU,AEdF,CLmBP,GGLa,CHKb,CAAK,CKnBS,ELmBf,EAAW,AKnBP,CFcU,CEdO,GNoBrB,CAAiB,ECDN,EDCX,CINc,CHKH,AGLc,CJMD,ACDR,GGLF,CHKd,AGLI,EHKkB,IDCG,IAAD,ACDF,EDCkB,ECDlB,CAAK,KAA3B,EAAkC,QAAA,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,UAAC,IAAD,EAAS;ADE5D,ACDA,AKpBiB,QNqBX,ACDA,IAAI,GDCG,KCDH,IDCY,EMpBqB,GNoBhB,CAAL,ACDZ,CDCG,ACDQ,CKnB4B,CNoBlB,EAAlB,ACDH,CDCV,ACDA,AKnB2C,CAAW,MAAM,EAAjB,CAD1B;ANsBjB,ACAA,AGT4D,AEb3C,WNsBV,CCAP,SDAiB,IAAV,CAAP,ENnCsB,AOmCtB,CAAoB,CAApB,CGNS,CAHmD,UHS9B;APlC1B,AMmCP,ACDiC,AGL1B,AEjBa,CNoBrB,WMnBe,GLqByB,AKtBnB,CFiBb,GV7BO,KAAK,SU6BZ,CAAqB,CAArB,CHKqD,EPlC9C,CAAoB,COkCK,EAA2B,EPlC3B,GOkCA,EAAkC,AGLnC,CAA/B,EV7BO,CAAP,CU6BsC,KHK6B,CAAD,EAAI,CAAJ;APjCrE,AMoCL,ACH0E,AGL5B,AEjBzB,QNyBrB,IMxBoB,MADC,CLsB+D,AGLhC,IHKoC,CDGxF,ACH0E,CDGzD,KIR8C,EJQ/D,EIRoD,CJQzB,CIR0C,CAAjB,CAAN;AJQnB,ACH+C,AGL5B,AEjBzB,SLsBmB,AGLhC,CHK0B,CDGA,CMxBN,OADP;AN0BjB,ACJ8B,AGT8B,AEb3C,KLsBjB,OKrBiC,EADhB,SNyBa;AAE9B,ACJA,AKvBiB,YLuBjB,AKtBqC,EADpB,CN2BV,aCJP,CAAoB,CDIZ,ACJR,KDIO,EAAiB,KCJM;ADK1B,ACL0B,AGP9B,SAAK,IAAI,EHO2B,CDK1B,CIZG,CAAb,EAAgB,IJYE,AIZE,CAApB,EAAuB,GJYC,AIZxB,EAA4B,GJYV,CAAY,ACL2B,GDKvC,CCLkB,CDKhC,CCL2D,KAA3B,EAAkC,UAAC,CAAD,EAAI,CAAJ;ADMlE,ACNkE,AGP1C,AEdxB,YAAM,EFcD,CAAmB,GJalB,CCNsE,IAAI,AKrB/D,CN2BjB,ACNkE,CDMrD,KAAb,EM3B0B,MAAT,EAAiB,EAAjB,CAAjB;AZjBR,AM6CK,ACPqE,AGLrE,AEfG,QZlBR,COsCwC,CAAN,EKpBpB,CZlBd,GAAA,GYkBsB,EZlBtB,IYkB4B,EAAN,GAAW,CAAC,EAAD,CAAX,GAAmB,KAAK,CAAC,EAAD,CAAL,GAAY,EAA7C;ANsB0B,ACFA,AKnB1B,KNqBmB,ACFvB,OKnBU,cAAc,eAAA,iBAAA,CAAkB,OAAlB,EAA2B,IAA3B,CAApB;ANqBmB,ACDvB,AGX4D,AERxD,CNoBR,WCDI,GKnBW,EAAE,WLmBb,CAAoB,CAApB,GGLS,CANmD,CERjD,EAAY,KLmBO,mBKnBnB,EAAyB,UAAzB,EAAP;AN4BR,ACTkC,AGJ1B,AEdH,QN2BL,OCTwC,CGJhC,QJaR,CAAiB,MAAjB,EIbQ,CJakB,AIbG,CAArB,CHIqD,IAArB,EAA2B,KAA3B,EAAkC,AGJnC,CAA/B,IAAsC,KHI6B,CAAD,EAAI,CAAJ;ADShD,ACTgD,AGJ5B,AEZ1C,QAAM,GNyBuB,QCTmD,AGJhC,IHIoC,CAAd,KKhB3C,CFYgC,IAAX,EAAiB,CAAjB,CAAN,kCEZ1C;AN0BA,ACVsE,AGJ5B,AEX1C,QAAM,CLe8B,AGJhC,CHI0B,GKfnB,SNwBkB,UMxBC,IAAnB,CAAwB,IAAxB,CAAX;AN0BA,ACX8B,AGH1B,AEXJ,KLcA,GKdI,ONyBG,AMzBI,CFWP,GEXJ,EAAiB,SNyBT,GIdJ,CAAqB,CJclB,AIdH,aAA8B,CAA9B,IAAqC;AJclC,ACVP,AGJyC,AEXxB,YLejB,ODUyB,AIdsB,MJchB,EMxBY,CLc3C,CAAoB,AGJqC,CHIzD,CDUyB,EAAlB,AIdwC,AEVE,EFUc,CAAhB,CAAN,AEVE,CAAW,ILcxB,EKd8B,EAAjB,CAD1B;ANyBV,ACVuB,AGJW,AEXxB,SFWb,MHIgC,qBAAqB,IAArB,EAA2B,KAA3B,EAAkC,UAAC,CAAD,EAAI,CAAJ;ADQzC,ACRyC,AGZV,AEH3C,KNuBK,OMtBX,IADM,GLe+D,IAAI,CAAd;ADQhD,ACRgD,AKfrD,CNuBrB,QCRwC,CAAN,EKdd,OADC;ALea,AGN9B,AETiB,KLejB,IGNK,GERmB,CFQf,IAAI,CAAb,EAAgB,AETC,IFSG,CAApB,EAAuB,GAAvB,EAA4B;AHO5B,AGP4B,AETX,YLgBjB,AKfiC,EADhB,CFSR,CAAmB,YHO5B,CAAoB,CAApB,YAA8B;AAAA,AGJ7B,AEZgB,YACoB,GLeD,AKhBnB,oBLgBuC,IAApB,EAA0B,KAA1B,EAAiC,UAAC,CAAD;AAAA,AGHxE,CAVD,kBHagF,CAAE,CAAT;AAAA,AGDzE,AEbQ,QFaR,CHCwC,CAAN,EKdpB,YAAW,CFazB,CAAkB,GAAlB,GAAwB,CEbU,OAAT,EFaA,AEbiB,EAAjB,CAAjB,CFagB;AHCU,AGDV,AEZhB,KLaJ,MGDmD,CEZzC,QAAQ,MAAM,IAAc,KAAd,CAAoB,IAApB,CAAN,GAAkC,EAAhD;ALeJ,AGFA,AEZI,YLcJ,AKdU,EFYJ,KAD6C,QEX3B,CLcxB,CAAiB,IAAjB,GAAwB,MKdA,ILcC,IAAD,EAAgB,OKdhB,CAAkB,QAAlB,EAA2B,KAA3B,CAApB;ALeA,AGFJ,AEZI,YLcM,GGFH,AEZI,EAAE,GLcK,SAAS,CGFnB,IHEwB,CAAL,AGFpB,CHEW,AKdP,CFYa,CHEY,AKdb,ELcL,CAAd,sBKdO,EAAyB,WAAzB,EAAP;ALeA,AGFA,AEZH,YLcS,IGFA,QHEY,AGFJ,KAAK,CAAL,CAAd,EHE2B,KAAK,CAAL,CAAT,EAAkB,EAAlB,CAAlB;AACA,AGFA,AEXJ,UAAM,IAAI,CLaC,GGFD,CEXJ,CLaU,GGFZ,CAAY,CHEL,EAAY,CGFnB,CAAiB,EAAE,KHEZ,CAAP,AGFyB,MEXQ,EFWR,EEXvB,CAAN,CFW6B,CAAK,QAAb,EAAuB,YAAvB,EAAjB;AHGH,AGFG,AEXP,CAtBD,IL+BI,aGEU,IAAN;AHIP,AGHI,AEVQ,CLFb,OKEa,YAAA,GAA6B;AFIa,AEFnD,KFEoB,IEJkB,iBAEhC,YAFgC,EAGhC,KAHgC,EAIhC,MAJgC,EAKhC,SALgC,EAMhC,KANgC,EAMnB;AFFC,AEIhB,CFJR,WEIc,OAAO,MAAM,KAAN,CAAY,IAAZ,EACR,GADQ,CACJ,UAAC,CAAD;AAAA,mBAAO,EAAE,IAAF,EAAP;AAAA,SADI,EAER,MAFQ,CAED,UAAC,CAAD;AAAA,mBAAO,MAAM,EAAb;AAAA,SAFC,EAGR,GAHQ,CAGJ,UAAC,CAAD;AAAA,mBAAO,kBAAkB,CAAlB,CAAP;AAAA,SAHI,CAAb;AAKA,eAAO,IAAI,cAAJ,CAAmB,KAAnB,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,IAA7C,CAAP;AACH;AAdqC,CAA7B","file":"scripts.29be3b81.map","sourcesContent":["\nexport function TODO<T>(reason: string = \"\"): T {\n    throw new Error(`Not Implemented${reason ? \": \" + reason : \"\"}`);\n}\n","import { Frames } from \"./Frames\";\nimport { MethodBody, InstructionInstance } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { OperandStack } from \"./OperandStack\";\nimport { Value } from \"./runtime\";\nimport { TODO } from \"./utils\";\n\nexport class Frame {\n\n    get currentInstruction(): InstructionInstance {\n        return this.getInstruction(this.position);\n    }\n\n    constructor(readonly parent: Frames,\n        readonly name: string,\n        public position: number,\n        readonly args: any[],\n        readonly methodBody: MethodBody,\n        readonly stack: OperandStack,\n        readonly locals: LocalVariables) { }\n\n    private getInstruction(pos: number): InstructionInstance {\n        const res = this.methodBody.code\n            .find((inst) => inst.position === pos);\n        if (!res) {\n            throw new Error(`No instruction found with position ${pos}`);\n        }\n        return res;\n    }\n\n    public next(position?: number): void {\n        if (position) {\n            this.getInstruction(position);\n            this.position = position;\n        } else {\n            const idx = this.methodBody.code.indexOf(this.currentInstruction);\n            this.position = this.methodBody.code[idx + 1].position;\n        }\n    }\n\n    public return(value?: Value): void {\n        TODO(\"Frame#return\");\n    }\n\n    public callStaticMethod(value: any): void {\n        TODO(\"Frame#callStaticMethod\");\n    }\n    public callObjectMethod(value: any): void {\n        TODO(\"Frame#callObjectMethod\");\n    }\n}\n","import { Value } from \"./runtime\";\n\nexport class LocalVariables {\n    private _list: Value[] = [];\n    get list(): Value[] {\n        return this._list;\n    }\n\n    constructor(size: number) {\n        this._list = Array.apply(null, Array<Value>(size));\n    }\n\n    public get(i: number): Value {\n        return this._list[i];\n    }\n\n    public set(i: number, value: Value): void {\n        this._list[i] = value;\n    }\n}\n","import { Value } from \"./runtime\";\n\nexport class OperandStack {\n    private _list: Value[];\n    private _position = 0;\n    get list(): Value[] {\n        return this._list;\n    }\n\n    constructor(size: number) {\n        this._list = Array.apply(null, Array<Value>(size));\n    }\n\n    public push(value: Value): void {\n        this._list[this._position] = value;\n        this._position++;\n    }\n\n    public pop(): Value {\n        const v = this._list[this._position];\n        this._position--;\n        return v;\n    }\n\n    public peek(): Value {\n        return this._list[this._position];\n    }\n}\n","import { Frame } from \"./Frame\";\nimport { Constant, MethodBody } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { OperandStack } from \"./OperandStack\";\nimport { TODO } from \"./utils\";\n\nexport class Frames {\n    public readonly frames: Frame[] = [];\n\n    constructor(readonly constantPool: Constant[],\n        readonly methods: Map<string, MethodBody>) {\n        const mainMethod = methods.get(\"main\");\n        if (!mainMethod) {\n            throw new Error(`'main' method is missing`);\n        }\n        const mainFrame = new Frame(this,\n            \"main\",\n            mainMethod.code[0].position,\n            [],\n            mainMethod,\n            new OperandStack(mainMethod.stack),\n            new LocalVariables(mainMethod.locals));\n        this.frames.push(mainFrame);\n    }\n\n    public next() {\n        const currentFrame = this.frames[this.frames.length - 1];\n        const { methodBody, position } = currentFrame;\n        const instruction = currentFrame.currentInstruction;\n        console.log(`Eval ${instruction.instruction.code}`);\n        instruction.instruction.apply(currentFrame);\n        console.log({ currentFrame });\n    }\n}\n","import { Constant } from \"../../models/input\";\nimport { ConstantPoolParser } from \"../parser\";\n\nconst createConstant = (s: string): Constant => {\n    const regexpConstant = /^\\s*#(\\d+) = ([a-zA-Z0-8]*)\\s+(\\S*)(\\s+\\/\\/\\s(.*))?$/gm;\n    const t = regexpConstant.exec(s);\n    const [all, sIndex, type, v0, rest, v1] = Array.from(t || []);\n    const index = parseInt(sIndex, 10);\n    const value = (v1 ? v1 : v0);\n    return {index, type, value};\n};\n\nexport const constantPoolParser: ConstantPoolParser = {\n    parse(input: string): Constant[] {\n        return input.split(\"\\n\")\n            .map((s) => s.trim())\n            .filter((s) => s !== \"\")\n            .map((s) => createConstant(s));\n    },\n};\n","import { Frame } from \"./Frame\";\nimport { Instruction } from \"./input\";\nimport { Value } from \"./runtime\";\n\nexport interface Constant {\n    index: number;\n    type: string;\n    value: string;\n}\n\nexport enum Type {\n    Constant,\n    // Numeric\n    Int,\n    Long,\n    Float,\n    Double,\n    Char,\n    Short,\n}\n\nexport function typePrefix(type: Type): string {\n    switch (type) {\n        case Type.Int:\n            return \"i\";\n        case Type.Long:\n            return \"l\";\n        case Type.Float:\n            return \"f\";\n        case Type.Double:\n            return \"d\";\n        case Type.Char:\n            return \"c\";\n        case Type.Short:\n            return \"s\";\n        default:\n            throw new Error(`Unexpected type ${type}`);\n    }\n}\n\nexport interface Instruction {\n    type?: Type;\n    code: string;\n    apply: (frame: Frame) => void;\n}\n\nexport interface InstructionInstance {\n    position: number;\n    instruction: Instruction;\n    args: any[];\n}\n\nexport interface InstructionBuilder {\n    [index: string]: (args: any[]) => Instruction;\n}\n\nexport interface MethodBody {\n    stack: number;\n    locals: number;\n    args_size: number;\n    code: InstructionInstance[];\n\n    eval(): Value;\n}\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type } from \"../input\";\n\n// return, ireturn\n\nexport const flowInstructions: InstructionBuilder = {};\n\ninterface Comparators {\n    [index: string]: (a: number, b: number) => boolean;\n}\n\nconst comparators: Comparators = {\n    ge: (a: number, b: number): boolean => a >= b,\n    gt: (a: number, b: number): boolean => a > b,\n    le: (a: number, b: number): boolean => a <= b,\n    lt: (a: number, b: number): boolean => a < b,\n    ne: (a: number, b: number): boolean => a !== b,\n};\n\nconst intIfCmp = (jump: number, cmp: keyof Comparators): Instruction => ({\n    type: Type.Int,\n    code: `if_icmp${cmp}`,\n    apply: (frame: Frame) => {\n        const b = frame.stack.pop().value as number;\n        const a = frame.stack.pop().value as number;\n        const needJump = comparators[cmp](a, b);\n        frame.next(needJump ? jump : undefined);\n    },\n});\n\nconst gotoLabel = (jump: number): Instruction => ({\n    code: `goto`,\n    apply: (frame: Frame) => {\n        frame.next(jump);\n    },\n});\n\nflowInstructions.if_icmpgt = (args: any[]) => {\n    const jump = parseInt(args[0], 10);\n    return intIfCmp(jump, \"gt\");\n};\n\nflowInstructions.goto = (args: any[]) => {\n    const jump = parseInt(args[0], 10);\n    return gotoLabel(jump);\n};\n\nflowInstructions.ireturn = () => ({\n    code: `ireturn`,\n    apply: (frame: Frame) => {\n        const value = frame.stack.pop();\n        frame.return(value);\n    },\n});\n\nflowInstructions.return = () => ({\n    code: `return`,\n    apply: (frame: Frame) => frame.return(),\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\nimport { TODO } from \"../utils\";\n\n// imul, iinc\n\nexport const mathInstructions: InstructionBuilder = {};\n\nconst typedBinaryOperation = (type: Type, key: string, ope: (a: number, b: number) => number): Instruction => ({\n    type,\n    code: typePrefix(type) + key,\n    apply: (frame: Frame) => {\n        const a = frame.stack.pop();\n        const b = frame.stack.pop();\n        frame.stack.push({ type, value: ope(a.value, b.value) });\n        frame.next();\n    },\n});\n\nconst typedUnaryOperation = (type: Type, key: string, ope: (a: number) => number): Instruction => ({\n    type,\n    code: typePrefix(type) + key,\n    apply: (frame: Frame) => {\n        const a = frame.stack.pop();\n        const b = frame.stack.pop();\n        frame.stack.push({ type, value: ope(a.value) });\n        frame.next();\n    },\n});\n\nconst incr = (index: number, increment: number): Instruction => ({\n    type: Type.Int,\n    code: \"iinc\",\n    apply: (frame: Frame) => {\n        const { type, value } = frame.locals.get(index);\n        frame.locals.set(index, { type, value: value + increment });\n        frame.next();\n    },\n});\n\n// Arithmetic\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach((type) => {\n    const t = typePrefix(type);\n\n    mathInstructions[`${t}add`] = () => typedBinaryOperation(type, \"add\", (a, b) => a + b);\n    mathInstructions[`${t}sub`] = () => typedBinaryOperation(type, \"sub\", (a, b) => a - b);\n    mathInstructions[`${t}mul`] = () => typedBinaryOperation(type, \"mul\", (a, b) => a * b);\n    mathInstructions[`${t}div`] = () => typedBinaryOperation(type, \"rem\", (a, b) => a % b);\n    mathInstructions[`${t}neg`] = () => typedUnaryOperation(type, \"neg\", (a) => - a);\n\n    mathInstructions.iinc = (args: any[]) => {\n        const index = parseInt(args[0], 10);\n        const increment = parseInt(args[1], 10);\n        return incr(index, increment);\n    };\n\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type } from \"../input\";\n\nexport const objectsInstructions: InstructionBuilder = {};\n\nobjectsInstructions.getstatic = (args: any[]) => ({\n    code: \"getstatic\",\n    apply: (frame: Frame) => {\n        const value = args[0];\n        frame.stack.push({ type: Type.Constant, value });\n        frame.next();\n    },\n});\n\nobjectsInstructions.invokestatic = (args: any[]) => ({\n    code: \"invokestatic\",\n    apply: (frame: Frame) => {\n        const value = args[0];\n        frame.callStaticMethod(value);\n    },\n});\n\nobjectsInstructions.invokevirtual = (args: any[]) => ({\n    code: \"invokevirtual\",\n    apply: (frame: Frame) => {\n        const value = args[0];\n        frame.callObjectMethod(value);\n    },\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder } from \"../input\";\n\n//\n\nexport const otherInstructions: InstructionBuilder = {};\n","import { Frame } from \"../Frame\";\nimport { Constant, Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\n\nexport const stackInstructions: InstructionBuilder = {};\n\nconst typedConst = (type: Type, value: any): Instruction => ({\n    type,\n    code: `${typePrefix(type)}const_${value}`,\n    apply: (frame: Frame) => {\n        frame.stack.push({ type, value });\n        frame.next();\n    },\n});\n\nconst typedStore = (type: Type, index: number): Instruction => ({\n    type,\n    code: `${typePrefix(type)}store_${index}`,\n    apply: (frame: Frame) => {\n        const value = frame.stack.pop();\n        frame.locals.set(index, value);\n        frame.next();\n    },\n});\n\nconst typedLoad = (type: Type, index: number): Instruction => ({\n    type,\n    code: `${typePrefix(type)}load_${index}`,\n    apply: (frame: Frame) => {\n        const value = frame.locals.get(index);\n        frame.stack.push({ type, value });\n        frame.next();\n    },\n});\n\n// Typed const, store, load\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach((type) => {\n    const t = typePrefix(type);\n\n    for (let i = 0; i < 6; i++) {\n        stackInstructions[`${t}const_${i}`] = () => typedConst(type, i);\n    }\n    for (let i = 0; i < 4; i++) {\n        stackInstructions[`${t}store_${i}`] = () => typedStore(type, i);\n        stackInstructions[`${t}load_${i}`] = () => typedLoad(type, i);\n    }\n});\n\nstackInstructions.ldc = (args: any[]): Instruction => ({\n    code: \"ldc\",\n    apply: (frame: Frame) => {\n        const value = args[0];\n        frame.stack.push({ type: Type.Constant, value });\n        frame.next();\n    },\n});\n","import { Instruction, InstructionBuilder } from \"../input\";\nimport { flowInstructions } from \"./flow\";\nimport { mathInstructions } from \"./math\";\nimport { objectsInstructions } from \"./objects\";\nimport { otherInstructions } from \"./others\";\nimport { stackInstructions } from \"./stacks\";\n\nconst allInstructions: InstructionBuilder = {\n    ...stackInstructions,\n    ...objectsInstructions,\n    ...mathInstructions,\n    ...flowInstructions,\n    ...otherInstructions,\n};\n\nconsole.log(`Got ${Object.keys(allInstructions).length} instructions`);\n\nexport const lookupInstruction = (opscode: string, args: any[]): Instruction => {\n    const i = allInstructions[opscode];\n    if (i) {\n        return i(args);\n    }\n\n    throw new Error(`Opscode ${opscode} not found !`);\n};\n","import { Constant, InstructionInstance, MethodBody } from \"../../models/input\";\nimport { lookupInstruction } from \"../../models/instructions\";\nimport { Value } from \"../../models/runtime\";\nimport { TODO } from \"../../models/utils\";\nimport { MethodParser } from \"../parser\";\n\nclass MethodBodyImpl implements MethodBody {\n\n    constructor(readonly stack: number,\n                readonly locals: number,\n                readonly args_size: number,\n                readonly code: InstructionInstance[]) {\n    }\n\n    public eval(): Value {\n        return TODO(); // FIXME\n    }\n}\n\nconst createInstruction = (line: string): InstructionInstance => {\n    const regexpInstruction1 = /^\\s*(\\d+): ([a-z0-9_]*)\\s+(\\S*)\\s+\\/\\/\\s(.*)$/gm;\n    const t1 = regexpInstruction1.exec(line);\n    if (t1 !== null) {\n        const [all, sIndex, opscode, v0, v1] = Array.from(t1 || []);\n        const position = parseInt(sIndex, 10);\n        const args = (v0 && v1 ? [v1] : (v0 ? [v0] : []));\n        const instruction = lookupInstruction(opscode, args);\n        return { position, instruction, args };\n    }\n\n    const regexpInstruction2 = /^\\s*(\\d+): ([a-z0-9_]*)(\\s+([\\d, ]*))?$/gm;\n    const t2 = regexpInstruction2.exec(line);\n    if (t2 !== null) {\n        const [all, sIndex, opscode, v0, v1] = Array.from(t2 || []);\n        const position = parseInt(sIndex, 10);\n        const args = (v1 ? (v1 as string).split(\", \") : []);\n        const instruction = lookupInstruction(opscode, args);\n        return { position, instruction, args };\n    }\n\n    throw new Error(`Cannot parse line ${line}`);\n};\n\nexport const methodParser: MethodParser = {\n\n    parse(constantPool: Constant[],\n          stack: number,\n          locals: number,\n          args_size: number,\n          input: string) {\n\n        const code = input.split(\"\\n\")\n            .map((s) => s.trim())\n            .filter((s) => s !== \"\")\n            .map((s) => createInstruction(s));\n\n        return new MethodBodyImpl(stack, locals, args_size, code);\n    },\n};\n","import {MethodBody} from \"./../models/input\";\nimport { constantPoolParser } from \"./impl/constant-parser\";\nimport { methodParser } from \"./impl/instruction-parser\";\n\nconst consts = `#1 = Methodref          #6.#18         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #19.#20        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #5.#21         // _01_factorial/Factorial.factorial:(I)I\n   #4 = Methodref          #22.#23        // java/io/PrintStream.println:(I)V\n   #5 = Class              #24            // _01_factorial/Factorial\n   #6 = Class              #25            // java/lang/Object\n   #7 = Utf8               <init>\n   #8 = Utf8               ()V\n   #9 = Utf8               Code\n  #10 = Utf8               LineNumberTable\n  #11 = Utf8               factorial\n  #12 = Utf8               (I)I\n  #13 = Utf8               StackMapTable\n  #14 = Utf8               main\n  #15 = Utf8               ([Ljava/lang/String;)V\n  #16 = Utf8               SourceFile\n  #17 = Utf8               Factorial.java\n  #18 = NameAndType        #7:#8          // \"<init>\":()V\n  #19 = Class              #26            // java/lang/System\n  #20 = NameAndType        #27:#28        // out:Ljava/io/PrintStream;\n  #21 = NameAndType        #11:#12        // factorial:(I)I\n  #22 = Class              #29            // java/io/PrintStream\n  #23 = NameAndType        #30:#31        // println:(I)V\n  #24 = Utf8               _01_factorial/Factorial\n  #25 = Utf8               java/lang/Object\n  #26 = Utf8               java/lang/System\n  #27 = Utf8               out\n  #28 = Utf8               Ljava/io/PrintStream;\n  #29 = Utf8               java/io/PrintStream\n  #30 = Utf8               println\n  #31 = Utf8               (I)V`;\n\nconst factorialCode = `0: iconst_1\n1: istore_1\n2: iconst_2\n3: istore_2\n4: iload_2\n5: iload_0\n6: if_icmpgt     19\n9: iload_1\n10: iload_2\n11: imul\n12: istore_1\n13: iinc          2, 1\n16: goto          4\n19: iload_1\n20: ireturn`;\n\nconst mainCode = ` 0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n3: iconst_5\n4: invokestatic  #3                  // Method plop:(I)I\n7: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n10: return`;\n\nexport const constantPool = constantPoolParser.parse(consts);\n\nexport const sample = new Map<string, MethodBody>()\n    .set(\"plop:(I)I\", methodParser.parse(constantPool, 2, 3, 1, factorialCode))\n    .set(\"main\", methodParser.parse(constantPool, 2, 1, 1, mainCode))\n;\n","import { Constant, Instruction, InstructionInstance } from \"./../models/input\";\n\nexport const renderConstantPool = (constantPool: Constant[]): string => `\n<details>\n    <summary>Constant Pool</summary>\n    <div class=\"constants\">\n      ${\n  constantPool.map((constant) => `\n        <div class=\"index\">${constant.index}</div>\n        <div class=\"type\">${constant.type}</div>\n        <div class=\"value\">${constant.value}</div>\n        `).join(\"\\n\")\n  }\n    </div>\n</details>\n`;\n\n// FIXME Frame, stack, locals, ... current step\nexport const renderMethodCode = (code: InstructionInstance[], position: number): string => {\n  const classes = (inst: InstructionInstance) => ([\n    inst.instruction.type ? `inst-${inst.instruction.type}` : \"\",\n    position === inst.position ? \"selected\" : \"\",\n  ].filter((s) => s !== \"\").join(\" \"));\n  return `\n<ul class=\"code\">\n  ${\n    code.map((inst) => `\n  <li class=\"${classes(inst)}\">\n    <div class=\"position\">${inst.position}</div>\n    <div class=\"code\">${inst.instruction.code}</div>\n    <div class=\"args\">${inst.args}</div>\n\n  </li>\n    `).join(\"\\n\")\n    }\n</ul>\n`;\n};\n","import { Value } from \"../models/runtime\";\nimport { LocalVariables } from \"./../models/LocalVariables\";\n\nconst renderLocalValue = (value: Value | null): string =>\n    value ? `<div class=\"type-${value.type}\" title=\"${value.value}\">${value.value}</div>` :\n        `<div class=\"empty\"></div>`;\n\nexport const renderLocals = (locals: LocalVariables): string => `\n<div class=\"locals\">\n    <header>Locals</header>\n    <div>\n        ${locals.list.map(renderLocalValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { OperandStack } from \"../models/OperandStack\";\nimport { Value } from \"../models/runtime\";\n\nconst renderStackValue = (value: Value | null): string =>\n    value ? `<div class=\"type-${value.type}\" title=\"${value.value}\">${value.value}</div>` :\n        `<div class=\"empty\"></div>`;\n\nexport const renderStack = (stack: OperandStack): string => `\n<div class=\"stack\">\n    <header>Stack</header>\n    <div>\n        ${stack.list.map(renderStackValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { Frame } from \"../models/Frame\";\nimport { Frames } from \"../models/Frames\";\nimport { renderConstantPool, renderMethodCode } from \"./inputs\";\nimport { renderLocals } from \"./locals\";\nimport { renderStack } from \"./stack\";\n\nconst renderFrame = (frame: Frame): string => `\n<article class=\"frame\">\n  <header>${frame.name} <span>${frame.args}</span></header>\n  ${renderMethodCode(frame.methodBody.code, frame.position)}\n  ${renderStack(frame.stack)}\n  ${renderLocals(frame.locals)}\n</article>\n`;\n\nexport const renderFrames = (frames: Frames): string => `\n${renderConstantPool(frames.constantPool)}\n<details open class=\"frames\">\n    <summary>Frames</summary>\n    <menu>\n      <button type=\"button\" class=\"next\">↩️ Next</button>\n    </menu>\n    <div>\n      ${frames.frames.map((frame) => renderFrame(frame)).join(\"\\n\")}\n    </div>\n</details>\n`;\n","import { MethodBody } from \"./models/input\";\nimport { OperandStack } from \"./models/OperandStack\";\n\nimport { Frame } from \"./models/Frame\";\nimport { Frames } from \"./models/Frames\";\nimport { LocalVariables } from \"./models/LocalVariables\";\nimport { constantPool, sample } from \"./parser/sample\";\nimport { renderFrames } from \"./templates/frame\";\n\nconst frames = new Frames(constantPool, sample);\nconsole.log({ frames });\n\nexport const catnip = (elt: HTMLElement | null): void => {\n    if (elt !== null) {\n        elt.innerHTML = renderFrames(frames);\n        const btn = document.querySelector(\".frames menu .next\") as HTMLButtonElement;\n        btn.onclick = () => {\n            frames.next();\n            catnip(elt);\n        };\n    } else {\n        console.warn(\"Cannot mount element:\", elt);\n    }\n};\n\nwindow.catnip = catnip;"]}