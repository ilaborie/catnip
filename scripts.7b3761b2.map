{"version":3,"sources":["scripts/models/input.ts","scripts/models/Frame.ts","scripts/models/LocalVariables.ts","scripts/models/native-methods.ts","scripts/models/OperandStack.ts","scripts/models/Frames.ts","scripts/parser/impl/constant-parser.ts","scripts/models/instructions/flow.ts","scripts/models/instructions/math.ts","scripts/models/instructions/objects.ts","scripts/models/instructions/others.ts","scripts/models/instructions/stacks.ts","scripts/models/instructions/index.ts","scripts/parser/impl/instruction-parser.ts","scripts/parser/sample.ts","scripts/templates/inputs.ts","scripts/templates/value.ts","scripts/templates/locals.ts","scripts/templates/stack.ts","scripts/templates/frame.ts","scripts/index.ts"],"names":[],"mappings":";;;;AASA,IAAY,IAAZ;AAAA,CAAA,UAAY,IAAZ,EAAgB;AACd,SAAA,KAAA,KAAA,IAAA,CAAA,IAAA,KAAA;AACA,SAAA,KAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA;AACA,SAAA,KAAA,KAAA,IAAA,CAAA,IAAA,KAAA;ACZF,ADaE,ICbF,KDaE,KCbF,ADaE,MAAA,ECbF,EDaE,CAAA,IAAA,ECbF,CAAA,GDaE;AACA,SAAA,KAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACA,AGhBF,IFMA,AENA,KHgBE,KAAA,AGhBF,QHgBE,AGhBF,IHgBE,CAAA,IAAA,AGhBF,CAAA,OHgBE;ACLA,ADMA,AGPF,IDRA,KFeE,AGPF,KHOE,KCLW,CDKX,CGPF,GHOE,AGPF,CFCE,ADMA,ECJW,EDIX,ECNA,EAGS,EDGT,MCNA,EAIW,IAJX,EAKW,UALX,EAMW,KANX,EAOW,MAPX,EAOiC;AAAA,ACVjC,AFUA,AGRF,SHQE,KAAA,OAAA,IAAA,CAAA,EEVY,EFUZ,EEVA,EAAwB,GFUxB;AEVwB,AFWzB,CAVD,EAAY,OAAA,QAAA,IAAA,KAAA,QAAA,IAAA,GAAI,EAAJ,CAAZ;ACGa,ADSb,AGVE,QAAM,CHUR,ICTa,EEDE,IFCF,ADSb,CAA2B,CGVN,CFCR,EDSb,CGVe,CHUsB,AGVX,EFCb,OEDE,CAAb;AFEW,ACVH,AFmBR,AGVA,ICRF,QJkBU,CCTG,ACVH,GFmBR,CCTW,CCVH,EDUG,CCVc,EAAjB,CDUG,CEDH,GAAR,oCAAe,IAAf;AFES,ACLP,AEGF,AJWE,AOtBJ,AJYE,AGVF,ICFA,ADEM,SLWK,ACLF,AFcA,COtBT,ILQI,AFcU,GCTH,ACLM,AFcb,AMpBmB,CCFvB,ENaW,EGFG,CFHS,GEGrB,AETI,ELWK,ACLM,AEGS,AGX1B,CLQ6B,AKR7B,ILQiB,EAAkB,KINZ,CJMyB,AINxB,CAAD,EAAwB,CJMZ,CAAlB,CAAb;ADMS,ACLV,AEEuB,AJYpB,AOrBN,AJWC,AGVC,QAAM,KLWK,IAAA,EDSA,CCTA,EDSP,ECTO,CKXY,wDAAvB;ALYW,AIhBb,ALyBI,AOpBS,ACJb,ALeA,AGXE,IDLF,AGCA,ALeM,IIXO,ADAL,IAAI,CLWC,ADSJ,CKzBT,AGCA,ALe8B,IHShB,IKzBd,ALyBI,AQxBJ,CPea,CMXA,ENWA,CMXuC,ADAzB,ECAd,EFLb,ACKY,CDLZ,AGCA,AFIgC,CEJhC,AFIY,CAAV,ELWW;AACA,AIhBb,ADKU,AJoBJ,AOfN,ACRA,ALcE,IEhBF,AEUM,SNMO,AGXH,CCLV,CFgBa,CADiB,EFCjB,AMNoB,CPepB,ECTA,CIhBb,ADKU,AJoBJ,GIpBgB,CHWT,AGXH,KCLV,CAAA;AJiBa,AIhBb,ADWI,AJcA,AOfF,ACPW,ACJb,ANiBE,AGf6C,IDD/C,AIDA,IFWM,ACPO,ALWiB,KFEjB,AGLJ,AJcA,CS1BT,ILYI,AJcU,CCTD,CMNN,CHCU,AGDX,CNMO,AQjBb,AHK4C,CDJ5C,ALyBI,AOfc,CAAZ,ACPO,ALaN,GCLgB,AIR6B,CPavC,AEFiB,AGVoB,CEDrC,CLaK,CEhBlB,CDWiB,AKZjB,AHK4C,CFOf,AKZ7B,AHKuD,IFOtC,CEP2C,CFOzB,CEPS,CAHG,IFUM,ICXrD,ADWmC,CCXnC,ADWiB,CAAb;AHME,AIhBN,ADWG,AJcG,AOhBA,ACLN,ACJa,ANgBT,AGhB2C,IDA/C,AGIM,ICJO,OFS4B,IPgB5B,COhBiC,CAAxC,CPgBA,CKzBN,IGI6B,ACJhB,CPSA,EOT0C,CJAvD,AHSsB,COTT,IDIP,aHJN,CAAA,MGI6B,CAC3B,IAD2B,EAE3B,GAF2B,EAG3B,GAH2B;AHH7B,AHSI,AFgBA,AOjBE,ACLuB,ACF7B,ACFA,APiBI,AGjB2C,IDC/C,CEOiC,GENjC,AHCS,GEKU,AFR4B,CHiBrC,CHSD,KAAK,CEhBH,CCOO,CEhBlB,GHSgB,AFgBZ,CGTmB,CAAL,CMflB,ANeI,CMfgB,CJDpB,AHSW,CAAW,CAAX,CAAP,KORJ,GAAgC,KJDhC,CAAA,IICiC,IAAD;APS7B,AFgBG,AOjBJ,ACDA,ACP8B,ACAnB,APgBT,AGlB2C,QCUzC,AGRO,AJCC,GGDoC,CNgB1C,EGlBuC,IEQ5B,ALUL,CHSD,COjBN,CAAD,CPiBA,AGTE,CIRU,CAAZ,CGRO,CPgBS,EOhB+B,EAAxC,EPgBe,KAAxB,EAA+B;AHU/B,AOlBE,ACAJ,ACPA,ACCF,ACNA,ARqBM,AGnByC,IDI/C,AMNA,IDMA,AJDsB,IAHyB,CN4BtC,CQlBD,ACPA,AELR,CJYyC,GPkB3B,COlB+B,CAAvC,EPkBF,AQlBI,AGZR,ERqBgB,CMjBkC,ACElD,CAAkB,GAAlB,GFMQ,AENgB,ACNxB,ARqBgB,CKTG,AGZnB,GRqBgB,CKTR,ALSa,IKTM,CENF,CPeE,CKXR,EEJK,CPeR,CAAV,WAAgC,MAAM,KAAtC;AERJ,ALkBI,AOnBA,ACCJ,ACPA,ACAsB,ACJX,ARoBR,AGpB0C,KCQd,GIRpB,ALGe,CHexB,CGlB2C,CIIQ,IFO9C,ACPA,ANgBE,IHSE,CKjBA,ELiBP,GW7BO,GAAwC,CVkBvC,AGLA,CIFJ,ACPA,AEJG,ENWX,EAEW,CGFJ,ACPA,CLSiB,CIFA,ACPA,ERcK,EIP7B,EAGqD;AJKnD,AILmD,ADAnD,AJgBA,AOnBF,AKbF,AJcI,ACPA,ACAF,ACHF,ARmBM,AGrByC,IMF/C,ADIM,IJSA,ADR0B,IDW5B,ACd2C,CN8BtC,AYhCT,CFOQ,ETcA,AOPE,ACPA,CLSD,AOZU,CX4BL,AGTF,COjB2C,CLUA,AEHhD,ACCO,CDDR,AKbN,CRgBI,CAAW,AJgBX,AOnBc,AJUD,CFFb,AMRE,AENY,ERcA,AOPE,AGVd,ETWO,AECO,CQhBpB,AHOuB,CGPvB,AHOkB,CPQM,AMDV,ACPV,CDOsB,ALSd,CAAe,EKTb,CGVK,CPYf,AIFA,AGVgB,CTWgB,ACQxB,CAAN,ECP2B,AOZd,EAAa,GPY5B,EOZe,2CNYK,CAAC,EAAE,MAAM,QAAA,IAAA,CAAK,GAAb,EAAkB,OAAO,EAAzB,EAAD,CAA+B;AJMjD,ACNF,AECA,AJgBE,AOpBA,AKZN,AJcI,ACPA,ACAF,ACJiB,ARoBd,AGtB0C,IMD/C,INIsC,EAHS,CKEc,ECH7D,ELYyC,AGLhC,CFOC,CNCD,AECA,CKTC,CTyBG,COpBiC,ACEhC,CPOH,AMTL,AKZN,CVeI,AFiBE,CEjBS,AORX,CPQA,AORY,ELSZ,AIFgB,ENCA,AORhB,CGPJ,AHOqB,CGPrB,AFOU,CFOI,ACPS,CDOG,CNCtB,EDME,AOPQ,AEPL,CTciB,COPtB,ACPyB,ORcvB,CQduB,IAAA,CAAK,QAAb,EAAuB,YAAvB,EAAjB;AReE,AIPiD,AHCpD,AECA,AJgBC,AOrBE,AKXN,AJcI,ACPA,ACDK,ACHP,ARoBE,ISvBJ,CLQiC,UJetB,CSvBX,EJcU,ACPA,AELmD,CDIlC,ETehB,CQdP,CDOA,CIdJ,AJcgB,ALSZ,COjB6B,GFQ7B,CPOE,AOPe,AERM,EFQJ,AERd,CTea,GWrBtB,CAAA,IXqBM,COPe,EAAQ,OAAO,IAAI,EAAE,KAAN,EAAa,EAAE,KAAf,CAAf,EAAjB;APQC,ADWC,AOrBJ,AKXF,AJcI,ACPD,ACFM,ACFP,ARoBC,AGpBD,IMHF,ILWM,ADRE,KLeJ,CUfO,CCHX,CNGgB,EN6BJ,AQlBF,CPOC,CMVJ,CAAD,CPqBU,AQlBZ,AGXO,CJQO,AKXlB,CLWM,CDRmB,EN6Bb,IM7BI,CKAL,CCHX,ADGsB,ALAW,CMHjC,CNGgB,CAAd,CKAS,CAAT,WX6BuC,GW7BL,CX6BxB,CAAN,GW/BuD;AVqBvD,AIXO,ALOX,AOPI,AKVN,AJcG,ACd+C,ACEK,ACCrD,ARQ4B,AGR5B,AQPF,CXeA,GSXA,AEJA,CLIgC,ACER,GJChB,KDOK,EEA4B,AKVzC,ADGS,CLAO,GCO6B,CNWjC,AMXN,CDPe,EMHrB,ANGgB,CQPhB,CTca,CJWK,AKlBQ,EDOb,ACPX,EKAQ,CVkBa,CazBvB,CFIA,CAAA,CDGS,EAAiB,GNOb,CJWK,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,CazB/C,CAAA,GbyBoD,kBAAlC,CAAZ;AACA,AIXO,ALsBZ,AOvBK,AKRN,AJImB,ACNa,ACER,ACEpB,ARqBS,AGrBX,AQPF,CLGA,ACEA,GEAM,AELN,CPSiC,ACJJ,GLuBhB,GGrBJ,EDOI,ACPF,KKAD,ENOG,CJWF,AEGE,CSvBQ,CPSR,AMPT,CAAY,ARqBa,CGrBpB,EAAS,AQPlB,CZEU,ASKN,ARqB6B,CFH3B,AWpBe,ADEA,CNOR,ADKD,COZW,ARqBM,CFHP,EEInB,CSxBkB,AELrB,CFKqB,CXoBM,AEGE,AGrBpB,CMFY,ATwBd,CGtBiB,CMDnB,CDCgB,EAAQ,IVkBP,CAAgB,CWnBjC,ENCI,CLkBa,CAAqB,AKlBzC,EKAmB,EAAjB,EVkB6C,CAA3B,EAA8B,AazBpD,CAAA,GFKqB,EAEhB,EXkBC,QWlBD,CTqBwB,EACqB,OADrB,EAE1B,GAF0B,CAEtB,GSzBc,EAGhB,OAAA,gBAHgB,EAIhB,OAAA,gBAJgB,EAKhB,GTkBwB,EAEsC,ISpB9D,GTkBwB,CAAhB,aSvBQ,CAArB;AXqBK,AIpBa,AHHd,AEiBA,AJDJ,AOLE,AKDF,AJR6B,ACO7B,AEJI,ALAH,AOTD,ACGA,ACFa,CPKb,AFJA,GOFA,ACGM,IdiBN,AOLM,AKDE,AHDR,AMZa,GHab,EPPkB,GDcR,EJDV,AWXU,CNFQ,AHHP,CEiBG,AGNP,CPKP,AOLM,AKDa,ACdnB,CROoC,AMEhC,CJMc,CFRA,AHHF,AKWV,CHMa,CWpBN,CNYb,CGC0B,AHDN,CPThB,AWJJ,AECkC,CXoBpB,CAAW,AJDzB,CYNmB,CAAY,GROD,GWpBK,CNYnC,GAAmC,ELQV,GAAiB,AQPvB,CROL,CAAV,AQP4C,CGbd,ENYE,GGCpC,ACdA,CJamC,AIbnC,y+CCGA;AbyBG,AIVC,AHbD,AEiBC,AGPE,AKCO,AJKb,ACRmC,AEHhC,ALCU,AQwBb,AClCkC,IPoB5B,AMcA,IFnBO,ANLA,GGEwC,CJK3C,GEH+B,EHOhC,IGPsC,CHO3C,AGPE,CHOS,ECJQ,AOFV,CJKe,AFVf,EFWO,AQNa,CNLqB,IDOvB,EGGzB,CHHiB,CAAY,ADIpB,CQLb,ERK8B,CAA5B,ECJmB,CAAnB,CDIiC,AQNJ,EAE/B,ERIE,EQN6B,EAGhB,CJEW,CAC1B,IAD0B,EAE1B,GAF0B,EAG1B,GAH0B,mCOhBpB,aACC,GADD,CAEE,oHD4BV;AThBI,ADIA,AGRE,AKKJ,AJC0B,ACP1B,AEV2D,ALQ3D,AQuCF,AC5CU,ACPV,IHGA,ACgDM,AEnDN,CLImB,GCgBX,CNT8C,EEcnC,CHNX,AOCI,CPDH,CILD,AOdR,GZuBS,ISnBP,CGJF,CXmBI,EAAiB,CDIjB,AEXI,EMQoB,AHPyB,GHFC,EACjC,EMQT,CAAV,GIpBF,CAAA,KHKa,KADX,CEI2B,CFFhB,MAFX,EAGW,AECyB,KAD5B,IFHR,EAIW,IAJX,EAIsC,gCECZ,SAAS,IAF3B,6CAGmB,SAAS,KAH5B,yFD4CV;AT/BM,ADIF,AGd6B,AKW/B,AJKA,ACXA,AEXiB,ALSf,AOLoC,ACiD3B,AClDH,ACLV,CTQA,AINA,GKFM,CDGE,EAQC,CHQH,AEoCO,CFpCX,EAAO,AGhBD,CAQM,GNEL,AHFE,CSRH,CAJ0B,CVmBtB,AGKO,CJDR,CAAP,AUiCS,CR3CN,CDMS,CSqCY,AEvDH,GVWd,CDOC,ACNC,GGCH,CHFC,CUXL,CVaC,EGAE,CHFE,CGEe,AHAf,IQ0CiB,OEvDH,CAAC,KAAD,CXkBnB,ISqCsB,CAAmB,KAAnB,CAAyB,MAAzB,CAAf;ATpCR,ADIF,AGPH,AKII,AJKF,ACXE,AEHJ,ALEW,AQ4CE,AC1DqB,AEAlC,ADCyB,CDDZ,GRiBP,AILA,AMZN,IH0Da,GExDX,GRwBM,AMgCK,AG1Db,CLqBW,CHND,CFES,AKIN,ADTM,AG8CG,AExDd,EVYQ,EMOL,ANPO,AQ4CQ,CFrCtB,AJKI,AS1BR,CDEE,CPagB,AK2CI,CR5CN,CCGV,AILA,CLEK,AQ6CR,CEzDgB,CPaI,AObrB,CPagB,AK2CI,CL3ClB,AK6CA,AG5DJ,ChB6BgB,AOHR,AS1BR,ADGM,CRuBa,GDTA,AILA,AKVjB,CTgBA,ACQM,AGdY,EViBS,AezBvB,ETaa,ACSQ,AGdR,EJOjB,AIP8B,CHYb,CQpBP,ETaO,CILA,CJQjB,AOsCoB,EAGlB,AEzDE,CTaa,ASZX,UAAC,GAAD,EAAM,GAAN,EFwDJ,YAAA,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,aAA1C,CAHkB,EAKnB,GALmB,CAKf,MALe,EAKP,qBAAA,YAAA,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,QAA1C,CALO,CAAT;Ab5BT,AITA,AEJe,AKKhB,AJKD,ACXE,AEJe,ALER,AOVE,AEab,AEfA,ADGQ,ICHF,KXUK,AORE,ENiBM,AIT6C,ALGzD,CDMG,EQjBG,CLuBJ,AQtBc,CfyBf,CKlBG,AORE,CJYH,AHDI,GLeV,CY1BS,CZ0BE,AgB5BU,ADGM,CXgBT,AILlB,CAAa,AOXM,IXgBI,CGMjB,ESzBJ,GTyBG,AQtBgC,ERsBf,CQtBH,EXgBD,CAAiB,AILnC,AOXgD,CPWlB,EOXX,GXgBD,AILlB,CQdqB,CZmBsB,AYnBrB,KAAD,ADGmC,GAApD,EXgBc,EAAqC,QAArC,CAAlB;AJUE,AITF,AEAF,AKEA,AJIE,ACXD,AEJD,ALEY,AOVD,AEaA,AEhBY,ACDzB,AFIQ,IEJF,CFGA,EAEE,CDYK,CFbA,AGDP,CJoBE,CKrBN,EDIQ,CJiBE,CCnBC,CLuBH,CQ3Be,CXqBX,AEDK,AIT6C,AEPnD,CDmBL,ANTW,CEaL,GU3BW,CjB8BX,AITV,AQjBS,AEaA,CVIQ,ACPI,CEaL,CPGd,AKhBQ,ASGkB,CdcrB,AIVP,CAAqB,CAArB,CGMU,CHNc,AGMF,AU3BpB,CjB+BU,AWRa,EJIf,EPGR,AOHF,AOTF,GHKM,CPF6B,AUJL,CVIJ,AYlBF,CZkBtB,AUFF,GdYsB,EgB5BQ,ACHP,CAAC,EjB+BG,AcdG,CEf9B,CFkBU,CGpBa,CjB8BnB,GWPJ,aKnBM,GhB2BuC,GgB3BjC,KhB2BiC,AgB7B7C,IhB6B6C,CAAK,MAAM,AgB1B/C,IhB0BoC,CADzC,GgBzBK,OhB2BD,MAAM,GgB3BL,CAAiB,ChByBtB,KgBzB4B,IAAvB,EAA6B,MAAM,KAAnC,CAHT,2CADuB;AhBkCpB,AIbD,AHvBJ,AKuBE,AKED,AJIG,ACjBiD,AEEnD,ALCY,AOTD,AEgBX,AEpBuB,ACDA,AFAA,CJcZ,AKbb,ADDA,IPWmC,GPZnC,AasBQ,CTVG,AONE,EPUN,AYdL,EjB4BE,AIPK,CMTE,ALFA,CAIA,CEaD,EKvBG,AEgBK,CdcP,AIbP,CAAY,AGMF,CKvBD,CXNb,AKuBc,AITH,ENSP,CAAiB,AHvBrB,CM6BoB,COPZ,GRCM,AMjBD,CToBA,AIGC,CAAY,AGff,CAAW,CNSlB,AUDc,CPOJ,AOPK,EPOf,AGfO,CAAT,CTdF,AasBkB,CRCJ,CAAW,CWpBC,GXoBZ,CAAZ,EWpB8B,IPWI,AOZlC,KXqBkC,AIX4B,GJS7C,WWlB6B,MAAM,KADpD,WAEM,MAAM,KAFZ,2CADuB;AjBoCnB,AIbH,ADGC,AGHF,ACME,AClB+B,AEGjC,ALCS,AOTE,AMNb,AJqBkB,AEbL,ACRY,AFQZ,CPGb,ASXA,GCAA,IFQa,ADAA,CHFA,IAAA,ENiBJ,AITA,AQdT,AJsBI,CXIM,ASpBG,AEiBP,EPMI,CFdM,CFWF,ASpBD,AIEA,CFeF,EPMP,AW7BJ,AFQ4B,ChB4Bd,AOPE,AQrBH,CZkBM,EHUb,Ae5B0B,Cf4BX,AOPjB,CAAiB,CJHP,AGHJ,AITA,CPYe,AIGF,CONjB,CdaoB,AkBpC1B,AJuBuB,AEfM,CXOE,Aaf/B,CZuBS,AITA,ALCO,CFWc,AEXnB,CLqBL,AMboB,AITA,AISpB,ACf2B,ECAL,ETqBP,AQrBW,ERqBH,AQrBgB,EZkBpB,CHUS,EGVQ,AYlBV,CZkBlB,CAAV,AIGgC,AONE,ACf6B,Cf4B5B,GOPC,CPOlC,AcbqC,CPMD,KAAN,CAAf,EAAjB,EONkC,CAAiB,IAAjD,GAA0D,EAD5D,EAEE,aAAa,KAAK,QAAlB,GAA6B,UAA7B,GAA0C,EAF5C,EAIG,MAJH,CAIU;AdWT,AGVD,AGHA,ACMA,ACXJ,AEJI,ALAO,AORL,AMNN,AJyBc,AElBc,ACDf,AFEX,IGRF,IVkBA,ASZa,CZIF,CAAP,EUFM,GGRV,CZuBU,AITA,AKNR,ERqBQ,CJHC,AWDQ,AGnBN,CdoBT,AGHU,ECMV,AUvBuB,CCN3B,CRckB,CIWO,CRFL,CELpB,AMOc,CNPM,EEJI,CJSV,CAAY,AWjBE,CCN5B,CAAA,CZuBc,AITI,CAAY,CORH,CXiBK,CITd,EFIlB,AEJI,EJSA,CELgC,UAAC,IAAD,gCQP1B,OAAO,IAAP,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,IAAlC,CAAuC,IAAvC,CAJkB;AGX5B,AnByCI,AGVD,AGHC,ACMD,ACZiC,AEHhC,ALAD,AadH,AJwBc,AElBc,ACDD,AFGvB,CCFS,GGXb,ADKA,KJoBI,ENHkD,AMQ/C,ECjBE,CGRT,CCLA,ALyBI,CRGM,AQEE,CdWH,CUtBC,CIMN,CRGU,AQJI,CCXT,CGRT,CCLA,AnByCI,CAAY,AUtBZ,CAAa,AKNR,CTeW,ASfN,ELMV,CAAiB,AKNjB,ETeU,AYvBd,ClBoCI,AMbsB,AYvB1B,ClBoCyB,CUtBrB,CJSU,CITc,EVsBxB,AMb4B,Ea5BhC,CAAA,ATmBI,EJSA,6CWdM,MAAM,IAAN,CAAW,GAAX,CAAe,gBAAf,EAAiC,IAAjC,CAAsC,IAAtC,CAJiB;AET3B,AnByCG,AMbC,ACHe,ACHjB,AEHE,ALRkD,AOCtD,AMPA,AJkBkB,AGdS,AFIrB,CVFO,AYFA,GETb,APYM,AMPN,CXgB4B,AOE1B,SNDM,AUjBR,CCLA,Cb4BU,EITA,IAAN,AQdJ,CCLA,CPY0B,GNgBL,EEPiC,EUhBtD,CAAA,CNOM,GGEK,GTcsB,Ca5BjC,CAAA,Cb4BqB,ASdJ,ETcqB,CAAjB,EAAoB,CAApB,CAAjB,ASdO,CHFe,AGED,CHFE,IAAD,AGEf,EHFqD,EGE9B,iBAAiB,KAAjB,CAAvB,GAAiD,KADtD;AIZN,Ab4BI,ACRwB,ACE1B,AEHC,AEPD,AMNF,AJuBE,ACfE,CRMJ,GYpBA,ADMM,INME,MOZR,CXsBS,EUhBU,CZsBT,Ia5BV,Ab4BI,CAAW,GYtBT,GNMuB,CJUnB,CJIG,GEEa,CENjB,CUhBU,CVgBO,AUhBN,CZsBL,Ga5Bf,Ab4BiC,AYtBd,AJyBf,CK/BJ,ILgCK,GADD,CRHA,AQKE,4BFrBJ;AOVF,AfyBI,AEED,ACMH,ACZI,AEX4D,AEC9D,AMPiB,AJ2Bb,AClBA,IIbA,AZiCA,CGvBa,GECX,GLsBK,EYjCE,APWF,GRcH,AIJA,CWrBS,EJaN,CRoBP,IAAO,ACZK,CDYJ,CYjCK,EhBIT,CKiBa,AORA,CRoBV,ACZK,CJIO,AIJrB,CWrBW,AZiCc,AKtBG,COXN,AJab,EGRW,CdoBM,AQdjB,AEqBE,ACnBe,CHFO,GMLhC,CX2BQ,AKtBA,COXa,APWxB,CMNsB,CAElB,AJyBiB,ACnBV,IXYT,AUOW,CADT,GClBsC,EIb7B,EAAyB,CJalC,QIbkC,MAAzB,CAAf,kBLiC4B,KAAK,QAF3B,wCAGkB,KAAK,WAAL,CAAiB,IAHnC,wCAIkB,KAAK,IAJvB;AK7BO,AfsBA,ADnBT,AGce,ACcN,ACXT,AEZe,AEEjB,AMLI,AJwBA,ACvBJ,CLEF,IJKmB,AQcf,EAWC,CKtCQ,APUP,AMLG,GX0BwD,AOJ7D,CItBE,AJiCI,EKtCG,CPUA,CRcD,AUGR,CK3BkB,ALyBpB,CNLQ,CLjBC,ASOT,CMLO,CNKU,GTPH,AKiBZ,AUfE,CVeW,CJEJ,CetBU,EfwBc,ADrBjC,CgBHkB,EAAkC,OnBsC/B,EIhBZ,AIFT,CJIQ,AIJsB,ERkBE,GQlBhC,KJES;AerBX,AnBsCE,AIjBS,ADlBV,AGSgB,ACmBjB,ACXC,AEHH,AERmB,AMLb,AJoCL,AC5BA,CTAD,AQCa,ACTA,GLaP,ISjBA,ADIS,KAAT,CX2BE,EY/BM,AnBsCJ,AIfc,AMNN,ISjBhB,CDIa,CCJK,AnBsCJ,AOPR,EHVK,CMJP,CHcE,AKrBmC,AMNrC,ClBkCe,AIfgB,AGQxB,GADoD,EKpBhB,EFO/B,CAAC,CEPwB,CZ4B3B,AY5BsC,CZ4BtB,CIjBnB,AMJK,CNMM,CMNO,CVqBf,CAAqB,AY5BuB,EAAjB,CFOzB,AERC,CZ6BH,CAA0B,AIjB7B;AepBT,AnBqCsC,AMX1C,ACKE,ACjBoD,AEEpC,AERC,AMLb,IZuBA,CEZ8B,MEE2B,CShBvD,EZ+BA,EDLU,ICG+C,CY7B7D,EnBqC8C,CmBrC9B,Cb0Bd,GNWiD,ImBrCnC,Eb0BF,CAAC,AYtBU,ClBiCqB,GMXhC,AYvBZ,ElBkC8D,GmBrChD,AnBqCsB,CmBrCT,KDIK,CCJlB,CAAhB,MDIkC,gBAAA,CAAiB,IAAjB,EAAuB,KAAvB,CADhC;ACFF,AnBoCsC,AIdtC,AEGc,ACMhB,AClBkC,AEGlC,AETiB,AMLb,CVWN,EUbwB,EAKnB,IALmB,CAKd,CZoBwC,CazBxC,APQC,AMRa,ClBoCR,AkBrCG,ClBqCf,COLK,AKxBU,CReT,EetBM,ATe+C,SSftC,GfsBD,AGSd,KAAD,EAAiB,GY/BV,CACV,EfqB+B,kBetBrB,AfsBZ,CetBA;AAGA,AnBkCA,AIdA,AEGF,ACKwB,ACV1B,AEJE,AEViB,AMRA,CAAnB,WCIQ,APKQ,EFSL,CSdP,CnBkCI,CmBlCK,AnBkCJ,CY9BU,EZ8Bf,AMZ8C,ENYpC,AUpBH,ENMK,QMNL,CAAW,ENMlB,CAAwB,AGSA,CGfjB,CAAT,GNME,CAA8B,AGSA,MAAN,CAAa,EGfN,CHeP,CAAiB,CHTzC,EMR2D,EHiBnC,CADF;AY3BpB,AnBkCA,AIdH,AEGD,ACIwB,AGbxB,AEXiB,AMAnB,IAAM,QNCkB,GNmBf,AITA,CSdC,AZ4BE,EWzBQ,CNAD,CLwBO,EPOd,CmBlCN,GAAc,AnBkCJ,CkB/BV,GZoBI,AITA,CVoBE,IMXH,AITA,EJSiB,AITA,CSdD,ADGL,CAAC,EXyBT,GWzBQ,CXwBM,CWxBS,OAAf,mBlB+BwC,GAAhD,CAAN;AmBjCE,AnBkCH,AMXD,ACGsB,AGZtB,AEZe,AMAC,YNCa,EADd,ELyBD,AGbR,EJSA,GCGgB,CDHtB,CavBW,AbuBA,CITG,GSdV,AbuBJ,GIToB,MAAN,CAAa,GAAb,AQXM,CRWW,CHajB,IGbA,CHYQ,AGZtB,GQX8B,SAAV,GAAsB,EAD1B,wBAER,MAAM,IAFE,SAEM,WAAW,MAAM,IAAjB,CAFN,qBAGhB,SAAA,gBAAA,CAAiB,MAAM,UAAN,CAAiB,IAAlC,EAAwC,MAAM,QAA9C,CAHgB,YAIhB,QAAA,WAAA,CAAY,MAAM,KAAlB,CAJgB,YAKhB,SAAA,YAAA,CAAa,MAAM,MAAnB,CALgB;ACDZ,AnBkCJ,AG7CJ,AGkCG,AITC,AEbe,AMAC,CAApB,OfZA,ISaqC,EADlB,IFaT,CVoBC,CG7CX,EH6CI,CG7CJ,AOyBI,CSdI,ATcQ,IAAZ,CAAiB,CSdb,CAAO,GAAP,ATcJ,CPzBJ;AgBYO,AnBkCJ,AMhB+C,ACQ9C,AGZA,AQLS,KZSK,GYTL,KCZP,KZ6BI,AGZA,EQLG,ERKT,CQLwB,CXiBxB,CAAa,GAAb,CAAiB,IWjBQ,CXiBzB,EAAwB,EAAE,CWjBF,EdUF,OAAa,AGOX,EAAQ,OAAO,QAAQ,SAAvB,EAAxB;AYzBC,AfmBD,AEFc,ACSd,AGZD,AEbC,AMOwB,CZS5B,WMhBU,IRkBA,AcVR,EXiBQ,IAAN,CKzBiB,EMQnB,MdUuB,CQlBK,MAAT,EAAiB,EAAjB,CAAjB,AMQF,CAAmB,IdUI,GcVG,UdUH,CAAc,CcVrC,CAD0B,CdWH,CAAkB,KAAlB,CAArB,qFcLI,OAAO,MAAP,CAAc,MAAd,GAAuB,CAAvB,2EANoB,yCAYpB,OAAO,MAAP,CACC,GADD,CACK;ACpBV,AfmBC,AEIJ,ACGG,AGpB4D,AEL3D,AMmBS,KC/BX,ATiBgB,GJiBlB,GavBS,ADoBa,CNnBZ,IRkBF,GQlBS,IMmBiB,CZGlC,CAAiB,AMtBM,EAAN,CRkBb,AcCkB,CZGtB,CFJsB,AQlBM,AMmBa,CNnBZ,CNsBL,CMtBI,CAAX,GAAkB,GMmBgB,EZG1B,AMtBe,CAAC,EAAD,CNsBhB,AMtBW,CMmBuB,CZGlB,CMtBO,EAA3C,QMmBkB,CAAT;ACnBT,AfmBE,AEIJ,ACL+D,AGb/C,AEJd,AMkBS,CRdb,EQaQ,EXAK,AWEJ,GZGD,CYLA,CAEM,ENnBJ,EMiBF,CZKO,AYjBa,CCNhB,IAAR,AfmBQ,CenBK,GbuBO,EMtBA,CRkBL,CJ/BK,CMmCK,CAAL,CAAT,CFJS,CEIS,EAAlB,CAAb,GFJiB,CAAa,CQlBR,GODpB,EAAsC,GAAtC,IfmByC,KQlBrB,CAAkB,GRkBvB,CAAb,GQlBkB,EAA2B,IAA3B,CAApB;AOAD,AnBZC,AI+BE,AEIJ,ACNW,AGHb,AEbI,AMIwB,CXY5B,AWZa,UZkBJ,IMtBE,EAAE,EZbF,CI+BC,CEIO,GNnCH,CMmCP,CFJS,AEIhB,SMtBS,EAAY,CZbZ,CAAoB,AI+BA,IAAb,CJ/BkB,AI+BA,IAAlB,CAAZ,GJ/BK,CAAP,QYaO,EAAyB,UAAzB,EAAP;AOAH,AnBZE,AI+BG,AEIL,ACGD,AGZA,AEbG,COhBU,AbmCb,AINC,QAAA,IAAA,CAAK,GAAN,EAAW,CNKD,GAAJ,EAAS,EMLJ,IAAA,CAAK,IAAhB,EAAsB,QAAA,IAAA,CAAK,KAA3B,EAAkC,QAAA,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,gBAAO;ASZ9D,AfkBQ,AEKR,ACEA,AGZE,AEZA,CLwBD,MYzBM,CbuBP,AIVQ,AEZA,CLwBP,GGZW,CSbZ,AZyBC,CAAK,EYzBU,CZyBhB,EAAW,CGZC,ISbI,AbuBhB,CFLa,AEKI,ECEN,EKxBkB,COD7B,ATaY,CJUZ,ACEW,AGZY,CHYP,EDFU,CIVd,CHYZ,AGZE,CNKM,CAAkB,AGOJ,KHPd,CAAwB,EGOV,EHPd,CAA6B,CGOf,CAAK,CHPnB,IGOR,EAAkC,QAAA,IAAA,CAAK,CKxBrC,KLwBF,EAA+C,OAA/C,CAAuD,gBAAO;AHNvD,AEImB,ACGxB,AKxBA,QLwBM,AKxBA,GNqByB,CCGrB,CKxBC,OLwBD,UAAA,CAAW,CKxBS,GLwBpB,CAAV,AKxBW,CAAwB,IAAxB,CAAX;ARkBI,AEIJ,ACIA,AGhB4D,AET5D,QAAI,ILyBJ,GKzBW,IAAX,ERiBS,AQjBQ,CNoBc,MCK/B,CAAoB,CAApB,CGbS,CAHmD,CNQxD,CAAkB,IAAlB,IGQ0B;AHP3B,AEIH,ACG8B,AGZ5B,AEbe,aRWf,EEWK,ACIL,CGbA,GNKO,QQjBgC,GNqBjC,GITN,AEZ6C,CFYxB,CJShB,AITL,CHaqB,CKzBkB,CAAW,ELyBlD,EAA2B,EKzB6B,EAAjB,CLyBvC,AK1Be,EL0BmB,AGbH,CAA/B,IAAsC,KHaH,CAAD,EAAI,CAAJ;AHPhC,AEGG,ACI6B,AGbI,AEbvB,mBNsBQ,ACIqB,AGbA,CNMpC,GGOwC,CAAd,CDJL,IFHZ,CMNsC,CJShC,EAAlB,CFHiB,AMNsB,EAAiB,CAAjB,CAAN,KNMrB,CAAe,KAAf,CAAf;AJvCN,AIwCM,AEEG,ACI6B,AGbI,AEbvB,QZpBnB,CO8CI,AGbA,CHY4B,EKxBrB,CZrBX,GAAA,AYoBmB,IRoBP,CJxCZ,OIwCmB,KAAK,OAAL,CAAa,OAAO,SAApB,CAAb;AACA,AED2B,ACKD,AGhB8B,AET3C,KNoBO,ACKxB,OKxBc,OADG,CRqBP,QAAQ,KAAK,WAAL,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,KAAhC,CAAd;AACA,AEFoB,ACOxB,AK3BiB,CNoBnB,WCOE,AK1BsB,QADL,CRsBR,MAAL,CAAY,AGKhB,CAAoB,CAApB,EHLI,CAAiB,KAAjB,IGK0B;AHJ1B,AEEN,ACEgC,AGf9B,AEZiB,CNyBlB,QAAA,AIbM,GEX0B,CNwBhC,AIbU,CJaL,AMzBa,CL4Bf,EDHJ,AIbe,CAAb,CJaS,CIbO,IAAI,CAApB,EJaS,AIbc,GAAvB,CJaS,CAAK,AIbc,IJa9B,ACGyB,EDHH,ECGlB,EAA2B,IDHT,CCGlB,EAAkC,CDHhB,CAAK,KAA3B,EAAkC,CCGK,CAAD,EAAI,CAAJ,GDHJ,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,gBAAO;AFDxD,AEEJ,ACEoC,AGhBR,AEZX,QN0BX,IAAI,AMzByB,EFW1B,CAAmB,AEZX,IL4B6B,CHJpC,AEEA,GCEwC,CAAd,KHJjB,CEET,CAAW,GFFG,CEEd,CAAV,UFFmB,CAAkB,MAAjC;AACA,AEGJ,ACAoC,AGdnC,KJcA,IAAD,ACAE,CAD4B,CDCvB,IAAP,EAAa,IAAb,CFHS,CEGU,IAAnB,EFHI,AEGqB,CFHR,GEGjB,EAA+B,KFHb,EEGlB,CFHiB,AEGsB,EFHhB,KAAN,QEG4B;AFH5B,AEIf,ACF4B,AKzB5B,KLyBF,OKzBQ,IN2BN,QM3BiB,GRuBc,KEI/B,CM3B0B,CRuBY,GAAP,CAAW,EQvBzB,CN2BM,CAAvB,AM3BkC,CRuBH,CQvBd,CRuBgC,AQvBjD,GRuB+B,CAAhB,IEIe,GAA9B,IAAuC,UAAC,IAAD,EAAgB;AFJxC,AEKb,ACDJ,AGpB4D,AEN1D,YL0BF,AK1BQ,IN2BE,CFLN,GQtBW,GN2BE,GM3BI,EL0BrB,CAAoB,CAApB,AK1BmC,EN2BT,CIfjB,CANmD,CENvC,CAAoB,CN2BV,CAAL,CAAT,CM3BI,CN2Bc,AM3BpB,CL0Be,CDCb,CAAb,AM3B6C,EAA/C;ARuBC,AEKC,ACF0B,AGb5B,AEZA,YAAM,GL0BN,CGdA,GJeS,QM3BW,GN2BA,GIfpB,CJeS,AIfY,CAArB,CJe0B,ACDL,IDCZ,ACDT,EDCgC,ACDL,AK1BP,GN2BX,CAAP,CCDF,EAAkC,AGdH,CAA/B,IAAsC,KHcH,AK1Bf,CL0Bc,AK1BI,EL0BA,CAAJ,KK1Bd,EAA2B,KAA3B,CAApB;ARuBD,AEKE,ACFiC,AGdI,AEXtC,SNwBA,MMxBO,EAAE,ELyBmC,AGdA,IHcI,CAAd,MGdqB,IAAX,EAAiB,AEXtD,CFWqC,CAAN,AEXnB,yBAAZ,EAAyB,WAAzB,EAAP;AN4BD,ACHmC,AGdI,AEVvC,KNsBD,ICEE,AGdA,CHa4B;ADM9B,ACN8B,AGZ5B,AETF,KLqBA,KKrBM,EN2BN,EM3BU,EFSR,GETI,SN2BN,CAAoB,CAApB,GIlBE,CAAqB,CAArB,QETmC,EN2BJ,EM3B3B,CFS0B,AEThC,CFSE,IAAqC;AJkBN,ACJjC,AGduC,AERxC,CAtBD,WL4CE,GDIwC,IIlBK,SHc7C,CAAoB,AGdmC,CHcvD,GGd6C,EAAgB,CAAhB,CAAN,INYf,CGEM,MHFI;AAChC,AEMA,ACL4B,AGdS,AEN5B,QAAA,CFMT,MHeA,CHFM,IQnBG,ENwB6B,CMxBA,QRmBjB,KGEA,IAArB,EAA2B,KAA3B,CHFqB,CGEa,UAAC,CAAD,CHFb,CAAc,AGEG,CAAJ,EHFb,CAAkB,KAAlB,CAArB;AACA,AEMA,ACLkC,AGvBwB,AEG5D,SADwC,ORoBlC,EEMK,CAAT,ACL4C,IAAI,CAAd,EKnBlC,ERkBA,EAAkB,AEIoB,QMxBA,EAGtC,KAHsC,EAItC,MAJsC,EAKtC,SALsC,EAMtC,KANsC,EAMzB;AReX,AEMF,ACNkC,AKblC,SLaA,CAD4B,EKZtB,ONmBC,AMnBM,CRaL,KQZL,KADU,CACJ,ERYY,CEMb,CMnBK,EAEV,CRWuB,CEMnB,CMnBM,CNmBW,AMjBjB,IRWc,CAAa,aAAa,SAA1B,CAAnB;AACA,AEMA,ACR0B,AGhB9B,AEMS,KLUT,IGhBK,IAAI,IAAI,CAAb,CEMc,CRYJ,AEMA,AIxBM,CEMA,GFNI,CAApB,AEMc,EFNS,AEMd,CNkBS,EIxBlB,ENkBsB,AMlBM,EJwBJ,GFNG,EEMT,CAAY,GAAZ,EAAd,IFNkB,CAAkB,KAAlB,CAAwB,GAAxB,EAAlB;AACA,AEMA,ACPJ,AGlB4B,AEMnB,SAFM,EAGV,CLWL,GGlBS,CAAmB,CEIb,CAGH,ERYF,EEMA,MFNQ,AEMd,ACPJ,CDOiB,ACPG,CAApB,IDOI,GFNM,KGDoB,uBHCE,UAAtB,EAAN;AACA,AEMD,ACR2B,AGf7B,AEIW,eLWwB,IKXnB,CRaP,KQba,CRaP,CQbJ,QLW4C,IHE3B,AGFO,EAA0B,EHE9C,CAAkB,EGFE,EHEpB,AGFqD,CHEjE;AACA,AEDoC,ACF6B,AGdtE,AEGa,CFbd,QJ0BmC,AMhBlB,EAIV,GAJU,CAIN,ILUiE,CHGlE,AGHmE,CAAN,EHGjE,EAAS;AACP,AEF2B,ACFoC,AGZvE,AEEW,KNYT,GIdF,CHYsC,CAAN,SKVhB,MRcH,AMhBb,CAAkB,SAAlB,ENgBQ,AQd0B,CRcR,AMhBI,AEEd,CAAL,IRcH,CAAwB,IAAxB,CAA6B,GAA7B;AACD,AEKN,ACV+B,AGZF,AEEnB,CNEX,ICQE,IKde,CAAb,CFEgC,WAAW,QAAA,IAAA,CAAK,GAAhB,EAAqB,CAAC,CAAtB,CAAN;ANkBxB,AGJJ,AGd4B,AEI1B,CFJJ,WHcE,GKVS,IAAI,ERcJ,OGJT,CAAiB,IHIb,AGJJ,AKVS,CRca,AQdM,ELUJ,EHIpB,CQdK,EAA0B,KLUV,CKVhB,EAAkC,CLUnB,EAAgB,MKV/B,EAA6C,IAA7C,CAAP;AReC,AGJD,AGbJ,AEGG,QFHH,IHaU,CHLN,MASO,CGJO,KGblB,CAAkB,GHaS,AGb3B,GAAwB,EHaQ,CAAL,CAAT,EAAkB,EAAlB,CAAd,CGbqB,IAAD;ANkBlB,AGJF,AGdoB,AEZkB,CAA7B,UFY0C,CHc7C,QHIE,IGJU,KHID,IGJU,CHIL,IGJU,CAAL,CAAT,EAAkB,CHInB,CAAe,AGJd,CAAlB,IHIiB,CAAf;AACA,AGJF,AGdF,cAAM,CHcG,IGf4C,CNmB3C,AGJI,KAAL,EAAY,OHIE,EGJd,CAAP,EHI0B,OAAL,CAAa,OAAO,SAApB,CAAnB;AACA,AGJH,AGdD,KHUA,UGVO,KNkBG,UMlBF,GNkBc,EMlBf,EAAiB,CNkBG,YAAL,CAAkB,KAAlB,CAAwB,GAAxB,EAAlB;AACA,AGJL,AGdG,CHJJ,eGIU,INkBE,IMlBM,KAAK,CNkBH,AMlBF,CAAd,SNkBQ,4BAAsB,WAAtB,EAAN;AACA,AMlBF,kBAAM,ENkBE,GMlBR,CAAY,INkBI,AMlBhB,CAAiB,EAAE,ENkBE,IMlBI,ONkBT,CAAiB,AMlBR,IAAA,CNkBT,AMlBc,ENkBU,MAAxB,AMlBC,ENkB+B,AMlBR,MNkBxB,CAAd,KMlBe,EAAjB;ANmBE,AMlBF,kBAAM,GNkBC,CMlBP,KNkBE,CAAY,IAAZ,CAAiB,KAAjB;AACA,AMlBH;ANmBG,AMzBiD,KAA/B,eNyBZ,SAAS,KAAK,YAAL,CAAkB,MAAjC;AACA,AM1BkB,CAAxB,sBN0BW,OAAL,CAAa,UAAC,GAAD,EAAM,KAAN;AAAA,AMjBnB,QAAA,iBAAA,CAAkB,CNiBiB,EMjBnC,GAAwB,ENiBkB,GAAP,CAAW,IMjBrB,CNiBU,EAAkB,CMjB7B,ENiBW,CAAhB;AAAA,AMjBK,WAA+B,MNiBjD;AACD,AMjBH,cAAM,KAD+C;ANmBpD,AMjBD,eAAO,eAAC,KAAD,EAAiB;AACtB,gBAAM,QAAQ,MAAM,KAAN,CAAY,IAAZ,EAAd;AACA,kBAAM,KAAN,CAAY,IAAZ,CAAiB,KAAjB;AACA,kBAAM,IAAN,WNgBc,OAAa;AAC3B,AMhBD,iBNgBM,MAAL,CAAY,GAAZ;AACA,AMvBmD,KAA/B,WNuBhB,KAAJ,EAAW;AACT,AMxBkB,CAAxB,oBNwBW,YAAL,CAAkB,KAAlB,CAAwB,IAAxB,CAA6B,KAA7B;AACD,AMhBL;ANiBI,gBAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,sBAAM,MAAN;AACD,aAFD,MAEO;AACL,qBAAK,YAAL,CAAkB,IAAlB;AACD;AACF;;;oCAEmB,MAAc,MAAkB,MAAa;AAC/D,mBAAO,IAAI,QAAA,KAAJ,CACL,IADK,EAEL,IAFK,EAGL,KAAK,IAAL,CAAU,CAAV,EAAa,QAHR,EAIL,IAJK,EAKL,IALK,EAML,IAAI,eAAA,YAAJ,CAAiB,KAAK,KAAtB,CANK,EAOL,IAAI,iBAAA,cAAJ,CAAmB,KAAK,MAAxB,CAPK,CAAP;AASD;;;kCAEiB,GAAS;AACzB,gBAAM,SAAS,KAAK,OAAL,CAAa,GAAb,CAAiB,CAAjB,CAAf;AACA,gBAAI,CAAC,MAAL,EAAa;AACX,sBAAM,IAAI,KAAJ,OACA,CADA,yBACqB,MAAM,IAAN,CAAW,KAAK,OAAL,CAAa,IAAb,EAAX,CADrB,CAAN;AAGD;AACD,mBAAO,MAAP;AACD;;;gCAEe,MAAY;AAC1B,gBAAM,OAAgB,EAAtB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAApB,EAA0B,GAA1B,EAA+B;AAC7B,qBAAK,IAAL,CAAU,KAAK,YAAL,CAAkB,KAAlB,CAAwB,GAAxB,EAAV;AACD;AACD,mBAAO,IAAP;AACD;;;4BA7Ge;AACd,mBAAO,KAAK,MAAL,CAAY,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAjC,CAAP;AACD;;;;;;AALH,QAAA,MAAA,GAAA,MAAA","file":"scripts.7b3761b2.map","sourcesContent":["import { Frame } from \"./Frame\";\nimport { Instruction } from \"./input\";\n\nexport interface Constant {\n  index: number;\n  type: string;\n  value: string;\n}\n\nexport enum Type {\n  Ref,\n  Constant,\n  // Numeric\n  Int,\n  Long,\n  Float,\n  Double,\n  Char,\n  Short\n}\n\nexport function typePrefix(type: Type): string {\n  switch (type) {\n    case Type.Int:\n      return \"i\";\n    case Type.Long:\n      return \"l\";\n    case Type.Float:\n      return \"f\";\n    case Type.Double:\n      return \"d\";\n    case Type.Char:\n      return \"c\";\n    case Type.Short:\n      return \"s\";\n    default:\n      throw new Error(`Unexpected type ${type}`);\n  }\n}\n\nexport interface Instruction {\n  type?: Type;\n  code: string;\n  apply: (frame: Frame) => void;\n}\n\nexport interface InstructionInstance {\n  position: number;\n  instruction: Instruction;\n  args: any[];\n}\n\nexport interface InstructionBuilder {\n  [index: string]: (args: any[]) => Instruction;\n}\n\nexport interface MethodBody {\n  stack: number;\n  locals: number;\n  args_size: number;\n  code: InstructionInstance[];\n}\n","import { Frames } from \"./Frames\";\nimport { InstructionInstance, MethodBody, Type } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { OperandStack } from \"./OperandStack\";\nimport { Value } from \"./runtime\";\n\nexport class Frame {\n  get currentInstruction(): InstructionInstance {\n    return this.getInstruction(this.position);\n  }\n\n  constructor(\n    readonly parent: Frames,\n    readonly name: string,\n    public position: number,\n    readonly args: Value[],\n    readonly methodBody: MethodBody,\n    readonly stack: OperandStack,\n    readonly locals: LocalVariables\n  ) {}\n\n  public next(position?: number): void {\n    if (position) {\n      this.getInstruction(position);\n      this.position = position;\n    } else {\n      const idx = this.methodBody.code.indexOf(this.currentInstruction);\n      this.position = this.methodBody.code[idx + 1].position;\n    }\n  }\n\n  public return(value?: Value): void {\n    if (value) {\n      console.log(\n        `${this.name}(${this.args}) return: [${Type[value.type]}] ${\n          value.value\n        }`\n      );\n    } else {\n      console.log(`${this.name}(${this.args}) return: void`);\n    }\n    this.parent.endFrame(value);\n  }\n\n  private getInstruction(pos: number): InstructionInstance {\n    const res = this.methodBody.code.find(inst => inst.position === pos);\n    if (!res) {\n      throw new Error(`No instruction found with position ${pos}`);\n    }\n    return res;\n  }\n}\n","import { Value } from \"./runtime\";\n\nexport class LocalVariables {\n  private _list: Value[] = [];\n  get list(): Value[] {\n    return this._list;\n  }\n\n  constructor(size: number) {\n    this._list = Array.apply(null, Array<Value>(size));\n  }\n\n  public get(i: number): Value {\n    return this._list[i];\n  }\n\n  public set(i: number, value: Value): void {\n    this._list[i] = value;\n  }\n}\n","import { Type } from \"./input\";\nimport { NativeMethod } from \"./native-methods\";\nimport { Value } from \"./runtime\";\n\nexport interface NativeMethod {\n  args_size: number;\n\n  call(args: any[]): Value | undefined;\n}\n\nfunction printConsole() {\n  const args = Array.from(arguments);\n  console.log(...args);\n  return;\n}\n\nconst println: NativeMethod = {\n  args_size: 1,\n  call(args: any[]) {\n    // first arg is the java/io/PrintStream\n    const value = args[1];\n    if (value.type && value.value) {\n      alert(`[${Type[value.type]}]: ${value.value}`);\n    } else {\n      alert(JSON.stringify(value));\n    }\n    return undefined;\n  }\n};\n\nexport const nativeMethods = new Map<string, NativeMethod>()\n  .set(\"Method java/io/PrintStream.println:(I)V\", println)\n  .set(\"Method java/io/PrintStream.println:(Ljava/lang/Object;)V\", println);\n","import { Value } from \"./runtime\";\n\ntype MaybeValue = Value | null;\n\nexport class OperandStack {\n  private _list: MaybeValue[];\n  private _position = 0;\n\n  get list(): MaybeValue[] {\n    return this._list;\n  }\n\n  constructor(size: number) {\n    this._list = Array.apply(null, Array<MaybeValue>(size));\n  }\n\n  public push(value: Value): void {\n    this._list[this._position] = value;\n    this._position++;\n  }\n\n  public pop(): Value {\n    const v = this._list[this._position - 1];\n    this._list[this._position - 1] = null;\n    this._position--;\n    return v as Value;\n  }\n\n  public peek(): Value {\n    const v = this._list[this._position - 1];\n    return v as Value;\n  }\n}\n","import { Frame } from \"./Frame\";\nimport { Constant, MethodBody, Type } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { nativeMethods } from \"./native-methods\";\nimport { OperandStack } from \"./OperandStack\";\nimport { Value } from \"./runtime\";\n\nexport class Frames {\n  public readonly frames: Frame[] = [];\n\n  get currentFrame(): Frame {\n    return this.frames[this.frames.length - 1];\n  }\n\n  constructor(\n    readonly constantPool: Constant[],\n    readonly methods: Map<string, MethodBody>,\n    mainArgs: Value[] = [{ type: Type.Ref, value: [] }]\n  ) {\n    const mainMethod = methods.get(\"main\");\n    if (!mainMethod) {\n      throw new Error(`'main' method is missing`);\n    }\n    const mainFrame = this.createFrame(\"main\", mainMethod, mainArgs);\n    mainFrame.locals.set(0, mainArgs[0]);\n    this.frames.push(mainFrame);\n  }\n\n  public next() {\n    const currentFrame = this.currentFrame;\n    const { methodBody, position } = currentFrame;\n    const instruction = currentFrame.currentInstruction;\n    instruction.instruction.apply(currentFrame);\n  }\n\n  public callStaticMethod(value: string): void {\n    const nativeMethod = nativeMethods.get(value);\n    if (nativeMethod) {\n      const args = this.getArgs(nativeMethod.args_size);\n      const res = nativeMethod.call(args);\n      if (res) {\n        this.currentFrame.stack.push(res);\n      }\n      this.currentFrame.next();\n    } else {\n      const method = this.getMethod(value);\n      const args = this.getArgs(method.args_size);\n      const frame = this.createFrame(value, method, args);\n      this.frames.push(frame);\n      // bind args to locals\n      const locals = this.currentFrame.locals;\n      args.forEach((arg, index) => locals.set(index, arg));\n    }\n  }\n\n  public callObjectMethod(value: any): void {\n    const nativeMethod = nativeMethods.get(value);\n    if (nativeMethod) {\n      const methodArgs = this.getArgs(nativeMethod.args_size);\n      const objectRef = this.currentFrame.stack.pop();\n      const args = [objectRef, ...methodArgs];\n      const res = nativeMethod.call(args);\n      if (res) {\n        this.currentFrame.stack.push(res);\n      }\n      this.currentFrame.next();\n    } else {\n      const method = this.getMethod(value);\n      const methodArgs = this.getArgs(method.args_size);\n      const objectRef = this.currentFrame.stack.pop();\n      const args = [objectRef, ...methodArgs];\n      const frame = this.createFrame(value, method, args);\n      this.frames.push(frame);\n      // bind args to locals\n      const locals = this.currentFrame.locals;\n      args.forEach((arg, index) => locals.set(index, arg));\n    }\n  }\n\n  public endFrame(value?: Value): void {\n    this.frames.pop();\n    if (value) {\n      this.currentFrame.stack.push(value);\n    }\n    if (this.frames.length === 0) {\n      alert(\"Done\");\n    } else {\n      this.currentFrame.next();\n    }\n  }\n\n  private createFrame(name: string, body: MethodBody, args: Value[]): Frame {\n    return new Frame(\n      this,\n      name,\n      body.code[0].position,\n      args,\n      body,\n      new OperandStack(body.stack),\n      new LocalVariables(body.locals)\n    );\n  }\n\n  private getMethod(m: string): MethodBody {\n    const method = this.methods.get(m);\n    if (!method) {\n      throw new Error(\n        `'${m}' not found, got ${Array.from(this.methods.keys())}`\n      );\n    }\n    return method;\n  }\n\n  private getArgs(size: number): Value[] {\n    const args: Value[] = [];\n    for (let i = 0; i < size; i++) {\n      args.push(this.currentFrame.stack.pop());\n    }\n    return args;\n  }\n}\n","import { Constant } from \"../../models/input\";\nimport { ConstantPoolParser } from \"../parser\";\n\nconst createConstant = (s: string): Constant => {\n  const regexpConstant = /^\\s*#(\\d+) = ([a-zA-Z0-8]*)\\s+(\\S*)(\\s+\\/\\/\\s(.*))?$/gm;\n  const t = regexpConstant.exec(s);\n  const [all, sIndex, type, v0, rest, v1] = Array.from(t || []);\n  const index = parseInt(sIndex, 10);\n  const value = v1 ? v1 : v0;\n  return { index, type, value };\n};\n\nexport const constantPoolParser: ConstantPoolParser = {\n  parse(input: string): Constant[] {\n    return input\n      .split(\"\\n\")\n      .map(s => s.trim())\n      .filter(s => s !== \"\")\n      .map(s => createConstant(s));\n  }\n};\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\n\n// return, ireturn\n\nexport const flowInstructions: InstructionBuilder = {};\n\ninterface Comparators {\n  [index: string]: (a: number, b: number) => boolean;\n}\n\nconst comparators: Comparators = {\n  ge: (a: number, b: number): boolean => a >= b,\n  gt: (a: number, b: number): boolean => a > b,\n  le: (a: number, b: number): boolean => a <= b,\n  lt: (a: number, b: number): boolean => a < b,\n  ne: (a: number, b: number): boolean => a !== b\n};\n\nconst typedIfCmp = (\n  type: Type,\n  jump: number,\n  cmp: keyof Comparators\n): Instruction => ({\n  type,\n  code: `if_${typePrefix(type)}cmp${cmp}`,\n  apply: (frame: Frame) => {\n    const b = frame.stack.pop().value as number;\n    const a = frame.stack.pop().value as number;\n    const needJump = comparators[cmp](a, b);\n    frame.next(needJump ? jump : undefined);\n  }\n});\n\nconst gotoLabel = (jump: number): Instruction => ({\n  code: `goto`,\n  apply: (frame: Frame) => {\n    frame.next(jump);\n  }\n});\n\nflowInstructions.goto = (args: any[]) => {\n  const jump = parseInt(args[0], 10);\n  return gotoLabel(jump);\n};\n\nflowInstructions.return = () => ({\n  code: `return`,\n  apply: (frame: Frame) => frame.return()\n});\n\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach(type => {\n  const t = typePrefix(type);\n\n  [\"gt\", \"ge\", \"lt\", \"le\", \"ne\"].forEach(cmp => {\n    flowInstructions[`if_${t}cmp${cmp}`] = (args: any[]) => {\n      const jump = parseInt(args[0], 10);\n      return typedIfCmp(type, jump, cmp);\n    };\n  });\n\n  flowInstructions[`${t}return`] = () => ({\n    type,\n    code: `${t}return`,\n    apply: (frame: Frame) => {\n      const value = frame.stack.pop();\n      frame.return(value);\n    }\n  });\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\n\n// imul, iinc\n\nexport const mathInstructions: InstructionBuilder = {};\n\nconst typedBinaryOperation = (\n  type: Type,\n  key: string,\n  ope: (a: number, b: number) => number\n): Instruction => ({\n  type,\n  code: typePrefix(type) + key,\n  apply: (frame: Frame) => {\n    const a = frame.stack.pop();\n    const b = frame.stack.pop();\n    frame.stack.push({ type, value: ope(a.value, b.value) });\n    frame.next();\n  }\n});\n\nconst typedUnaryOperation = (\n  type: Type,\n  key: string,\n  ope: (a: number) => number\n): Instruction => ({\n  type,\n  code: typePrefix(type) + key,\n  apply: (frame: Frame) => {\n    const a = frame.stack.pop();\n    const b = frame.stack.pop();\n    frame.stack.push({ type, value: ope(a.value) });\n    frame.next();\n  }\n});\n\nconst incr = (index: number, increment: number): Instruction => ({\n  type: Type.Int,\n  code: \"iinc\",\n  apply: (frame: Frame) => {\n    const { type, value } = frame.locals.get(index);\n    frame.locals.set(index, { type, value: value + increment });\n    frame.next();\n  }\n});\n\n// Arithmetic\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach(type => {\n  const t = typePrefix(type);\n\n  mathInstructions[`${t}add`] = () =>\n    typedBinaryOperation(type, \"add\", (a, b) => a + b);\n  mathInstructions[`${t}sub`] = () =>\n    typedBinaryOperation(type, \"sub\", (a, b) => a - b);\n  mathInstructions[`${t}mul`] = () =>\n    typedBinaryOperation(type, \"mul\", (a, b) => a * b);\n  mathInstructions[`${t}div`] = () =>\n    typedBinaryOperation(type, \"rem\", (a, b) => a % b);\n  mathInstructions[`${t}neg`] = () => typedUnaryOperation(type, \"neg\", a => -a);\n\n  mathInstructions.iinc = (args: any[]) => {\n    const index = parseInt(args[0], 10);\n    const increment = parseInt(args[1], 10);\n    return incr(index, increment);\n  };\n});\n","import { Frame } from \"../Frame\";\nimport { InstructionBuilder, Type } from \"../input\";\n\nexport const objectsInstructions: InstructionBuilder = {};\n\nobjectsInstructions.getstatic = (args: any[]) => ({\n  code: \"getstatic\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.stack.push({ type: Type.Constant, value });\n    frame.next();\n  }\n});\n\nobjectsInstructions.invokestatic = (args: any[]) => ({\n  code: \"invokestatic\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.parent.callStaticMethod(value);\n  }\n});\n\nobjectsInstructions.invokevirtual = (args: any[]) => ({\n  code: \"invokevirtual\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.parent.callObjectMethod(value);\n  }\n});\n\n// new, invokespecial, putfield, getfield\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder } from \"../input\";\n\n//\n\nexport const otherInstructions: InstructionBuilder = {};\n\notherInstructions.nop = (args: any[]): Instruction => ({\n  code: \"nop\",\n  apply: (frame: Frame) => frame.next()\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\n\nexport const stackInstructions: InstructionBuilder = {};\n\nconst typedConst = (type: Type, value: any): Instruction => ({\n  type,\n  code: `${typePrefix(type)}const_${value}`,\n  apply: (frame: Frame) => {\n    frame.stack.push({ type, value });\n    frame.next();\n  }\n});\n\nconst typedStore = (type: Type, index: number): Instruction => ({\n  type,\n  code: `${typePrefix(type)}store_${index}`,\n  apply: (frame: Frame) => {\n    const value = frame.stack.pop();\n    frame.locals.set(index, value);\n    frame.next();\n  }\n});\n\nconst typedLoad = (type: Type, index: number): Instruction => ({\n  type,\n  code: `${typePrefix(type)}load_${index}`,\n  apply: (frame: Frame) => {\n    const value = frame.locals.get(index);\n    frame.stack.push(value);\n    frame.next();\n  }\n});\n\n// Typed const, store, load\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach(type => {\n  const t = typePrefix(type);\n\n  for (let i = 0; i < 6; i++) {\n    stackInstructions[`${t}const_${i}`] = () => typedConst(type, i);\n  }\n  for (let i = 0; i < 4; i++) {\n    stackInstructions[`${t}store_${i}`] = () => typedStore(type, i);\n    stackInstructions[`${t}load_${i}`] = () => typedLoad(type, i);\n  }\n});\n\nstackInstructions.iconst_m1 = () => typedConst(Type.Int, -1);\n\nstackInstructions.ldc = (args: any[]): Instruction => ({\n  code: \"ldc\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.stack.push({ type: Type.Constant, value });\n    frame.next();\n  }\n});\n\nstackInstructions.dup = (args: any[]): Instruction => ({\n  code: \"dup\",\n  apply: (frame: Frame) => {\n    const value = frame.stack.peek();\n    frame.stack.push(value);\n    frame.next();\n  }\n});\n\n// Tstore, Tload, bipush, putstatic, aastore\n","import { Instruction, InstructionBuilder } from \"../input\";\nimport { flowInstructions } from \"./flow\";\nimport { mathInstructions } from \"./math\";\nimport { objectsInstructions } from \"./objects\";\nimport { otherInstructions } from \"./others\";\nimport { stackInstructions } from \"./stacks\";\n\nconst allInstructions: InstructionBuilder = {\n  ...stackInstructions,\n  ...objectsInstructions,\n  ...mathInstructions,\n  ...flowInstructions,\n  ...otherInstructions\n};\n\nconsole.log(`Got ${Object.keys(allInstructions).length} instructions`);\n\nexport const lookupInstruction = (\n  opscode: string,\n  args: any[]\n): Instruction => {\n  const i = allInstructions[opscode];\n  if (i) {\n    return i(args);\n  }\n\n  throw new Error(`Opscode ${opscode} not found !`);\n};\n","import { Constant, InstructionInstance, MethodBody } from \"../../models/input\";\nimport { lookupInstruction } from \"../../models/instructions\";\nimport { MethodParser } from \"../parser\";\n\nclass MethodBodyImpl implements MethodBody {\n  constructor(\n    readonly stack: number,\n    readonly locals: number,\n    readonly args_size: number,\n    readonly code: InstructionInstance[]\n  ) {}\n}\n\nconst createInstruction = (line: string): InstructionInstance => {\n  const regexpInstruction1 = /^\\s*(\\d+): ([a-z0-9_]*)\\s+(\\S*)\\s+\\/\\/\\s(.*)$/gm;\n  const t1 = regexpInstruction1.exec(line);\n  if (t1 !== null) {\n    const [all, sIndex, opscode, v0, v1] = Array.from(t1 || []);\n    const position = parseInt(sIndex, 10);\n    const args = v0 && v1 ? [v1] : v0 ? [v0] : [];\n    const instruction = lookupInstruction(opscode, args);\n    return { position, instruction, args };\n  }\n\n  const regexpInstruction2 = /^\\s*(\\d+): ([a-z0-9_]*)(\\s+([\\d, ]*))?$/gm;\n  const t2 = regexpInstruction2.exec(line);\n  if (t2 !== null) {\n    const [all, sIndex, opscode, v0, v1] = Array.from(t2 || []);\n    const position = parseInt(sIndex, 10);\n    const args = v1 ? (v1 as string).split(\", \") : [];\n    const instruction = lookupInstruction(opscode, args);\n    return { position, instruction, args };\n  }\n\n  throw new Error(`Cannot parse line ${line}`);\n};\n\nexport const methodParser: MethodParser = {\n  parse(\n    constantPool: Constant[],\n    stack: number,\n    locals: number,\n    args_size: number,\n    input: string\n  ) {\n    const code = input\n      .split(\"\\n\")\n      .map(s => s.trim())\n      .filter(s => s !== \"\")\n      .map(s => createInstruction(s));\n\n    return new MethodBodyImpl(stack, locals, args_size, code);\n  }\n};\n","import { MethodBody } from \"./../models/input\";\nimport { constantPoolParser } from \"./impl/constant-parser\";\nimport { methodParser } from \"./impl/instruction-parser\";\n\nconst consts = `#1 = Methodref          #6.#18         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #19.#20        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #5.#21         // _01_plop/Plop.plop:(I)I\n   #4 = Methodref          #22.#23        // java/io/PrintStream.println:(I)V\n   #5 = Class              #24            // _01_plop/Plop\n   #6 = Class              #25            // java/lang/Object\n   #7 = Utf8               <init>\n   #8 = Utf8               ()V\n   #9 = Utf8               Code\n  #10 = Utf8               LineNumberTable\n  #11 = Utf8               plop\n  #12 = Utf8               (I)I\n  #13 = Utf8               StackMapTable\n  #14 = Utf8               main\n  #15 = Utf8               ([Ljava/lang/String;)V\n  #16 = Utf8               SourceFile\n  #17 = Utf8               Plop.java\n  #18 = NameAndType        #7:#8          // \"<init>\":()V\n  #19 = Class              #26            // java/lang/System\n  #20 = NameAndType        #27:#28        // out:Ljava/io/PrintStream;\n  #21 = NameAndType        #11:#12        // plop:(I)I\n  #22 = Class              #29            // java/io/PrintStream\n  #23 = NameAndType        #30:#31        // println:(I)V\n  #24 = Utf8               _01_plop/Plop\n  #25 = Utf8               java/lang/Object\n  #26 = Utf8               java/lang/System\n  #27 = Utf8               out\n  #28 = Utf8               Ljava/io/PrintStream;\n  #29 = Utf8               java/io/PrintStream\n  #30 = Utf8               println\n  #31 = Utf8               (I)V`;\n\nconst factorialCode = `0: iconst_1\n1: istore_1\n2: iconst_2\n3: istore_2\n4: iload_2\n5: iload_0\n6: if_icmpgt     19\n9: iload_1\n10: iload_2\n11: imul\n12: istore_1\n13: iinc          2, 1\n16: goto          4\n19: iload_1\n20: ireturn`;\n\nconst mainCode = ` 0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n3: iconst_5\n4: invokestatic  #3                  // Method plop:(I)I\n7: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n10: return`;\n\nexport const constantPool = constantPoolParser.parse(consts);\n\nexport const sample = new Map<string, MethodBody>()\n  .set(\n    \"Method plop:(I)I\",\n    methodParser.parse(constantPool, 2, 3, 1, factorialCode)\n  )\n  .set(\"main\", methodParser.parse(constantPool, 2, 1, 1, mainCode));\n","import { Constant, InstructionInstance } from \"../models/input\";\n\nexport const renderConstantPool = (constantPool: Constant[]): string => `\n<details>\n    <summary>Constant Pool</summary>\n    <div class=\"constants\">\n      ${constantPool\n        .map(\n          constant => `\n        <div class=\"index\">${constant.index}</div>\n        <div class=\"type\">${constant.type}</div>\n        <div class=\"value\">${constant.value}</div>\n        `\n        )\n        .join(\"\\n\")}\n    </div>\n</details>\n`;\n\n// FIXME Frame, stack, locals, ... current step\nexport const renderMethodCode = (\n  code: InstructionInstance[],\n  position: number\n): string => {\n  const classes = (inst: InstructionInstance) =>\n    [\n      inst.instruction.type ? `inst-${inst.instruction.type}` : \"\",\n      position === inst.position ? \"selected\" : \"\"\n    ]\n      .filter(s => s !== \"\")\n      .join(\" \");\n  return `\n<ul class=\"code\">\n  ${code\n    .map(\n      inst => `\n  <li class=\"${classes(inst)}\">\n    <div class=\"position\">${inst.position}</div>\n    <div class=\"code\">${inst.instruction.code}</div>\n    <div class=\"args\">${inst.args}</div>\n\n  </li>\n    `\n    )\n    .join(\"\\n\")}\n</ul>\n`;\n};\n","import Any = jasmine.Any;\nimport { Type } from \"../models/input\";\n\nconst renderArrayValue = (array: Any[]): string =>\n  array.length === 0\n    ? \"[]\"\n    : array.reduce(\n        (acc, elt) => (acc === \"\" ? `[ ${elt}` : `${acc}, ${elt}`),\n        \"\"\n      ) + \" ]\";\n\nexport const renderTypedValue = (type: Type, value: any): string => {\n  switch (type) {\n    case Type.Ref:\n      return `\n    ref: ${Array.isArray(value) ? renderArrayValue(value) : value}`;\n    default:\n      return value === null ? \"<null>\" : `${value}`;\n  }\n};\n","import { LocalVariables } from \"../models/LocalVariables\";\nimport { Value } from \"../models/runtime\";\nimport { renderTypedValue } from \"./value\";\n\nconst renderLocalValue = (value: Value | null): string =>\n  value\n    ? `<div class=\"type-${value.type}\" title=\"${\n        value.value\n      }\">${renderTypedValue(value.type, value.value)}</div>`\n    : `<div class=\"empty\"></div>`;\n\nexport const renderLocals = (locals: LocalVariables): string => `\n<div class=\"locals\">\n    <header>Locals</header>\n    <div>\n        ${locals.list.map(renderLocalValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { OperandStack } from \"../models/OperandStack\";\nimport { Value } from \"../models/runtime\";\n\nconst renderStackValue = (value: Value | null): string =>\n  value\n    ? `<div class=\"type-${value.type}\" title=\"${value.value}\">${\n        value.value\n      }</div>`\n    : `<div class=\"empty\"></div>`;\n\nexport const renderStack = (stack: OperandStack): string => `\n<div class=\"stack\">\n    <header>Stack</header>\n    <div>\n        ${stack.list.map(renderStackValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { Frame } from \"../models/Frame\";\nimport { Frames } from \"../models/Frames\";\nimport { Value } from \"../models/runtime\";\nimport { renderConstantPool, renderMethodCode } from \"./inputs\";\nimport { renderLocals } from \"./locals\";\nimport { renderStack } from \"./stack\";\nimport { renderTypedValue } from \"./value\";\n\nconst renderArgs = (args: Value[]): string =>\n  `<span class=\"args\">${args\n    .map(\n      ({ type, value }) =>\n        `<span class=\"type-${type}\">${renderTypedValue(type, value)}</span>`\n    )\n    .join(\"\")}</span>`;\n\nconst renderFrame = (frame: Frame, current: boolean): string => `\n<article class=\"frame ${current ? \"current\" : \"\"}\">\n  <header>${frame.name} ${renderArgs(frame.args)}</header>\n  ${renderMethodCode(frame.methodBody.code, frame.position)}\n  ${renderStack(frame.stack)}\n  ${renderLocals(frame.locals)}\n</article>\n`;\n\nexport const renderFrames = (frames: Frames): string => `\n${renderConstantPool(frames.constantPool)}\n<details open class=\"frames\">\n    <summary>Frames</summary>\n    <menu>\n      ${\n        frames.frames.length > 0\n          ? `<button type=\"button\" class=\"next\">↩️ Next</button>`\n          : ``\n      }\n    </menu>\n    <div>\n      ${frames.frames\n        .map(frame => renderFrame(frame, frame === frames.currentFrame))\n        .join(\"\\n\")}\n    </div>\n</details>\n`;\n","import { Frames } from \"./models/Frames\";\nimport { constantPool, sample } from \"./parser/sample\";\nimport { renderFrames } from \"./templates/frame\";\n\nconst frames = new Frames(constantPool, sample);\n\nexport const catnip = (elt: HTMLElement | null): void => {\n  if (elt !== null) {\n    elt.innerHTML = renderFrames(frames);\n    const btn = document.querySelector(\n      \".frames menu .next\"\n    ) as HTMLButtonElement;\n    if (btn) {\n      btn.onclick = () => {\n        frames.next();\n        catnip(elt);\n      };\n    }\n  } else {\n    console.warn(\"Cannot mount element:\", elt);\n  }\n};\n\nwindow.catnip = catnip;\n"]}