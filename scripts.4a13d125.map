{"version":3,"sources":["scripts/models/input.ts","scripts/models/Frame.ts","scripts/models/LocalVariables.ts","scripts/models/native-methods.ts","scripts/models/OperandStack.ts","scripts/models/Frames.ts","scripts/parser/impl/constant-parser.ts","scripts/models/instructions/flow.ts","scripts/models/instructions/math.ts","scripts/models/instructions/objects.ts","scripts/models/instructions/others.ts","scripts/models/instructions/stacks.ts","scripts/models/instructions/index.ts","scripts/parser/impl/instruction-parser.ts","scripts/parser/sample.ts","scripts/templates/inputs.ts","scripts/templates/locals.ts","scripts/templates/stack.ts","scripts/templates/frame.ts","scripts/index.ts"],"names":[],"mappings":";;;;AAUA,IAAY,IAAZ;AAAA,CAAA,UAAY,IAAZ,EAAgB;AACd,SAAA,KAAA,UAAA,IAAA,CAAA,IAAA,UAAA;AACA;AACA,SAAA,KAAA,KAAA,IAAA,CAAA,IAAA,KAAA;AACA,SAAA,KAAA,MAAA,IAAA,CAAA,IAAA,MAAA;ACbF,ADcE,ICdF,KDcE,KCdF,ADcE,OAAA,CCdF,GDcE,CAAA,IAAA,CCdF,CAAA,KDcE;AACA,SAAA,KAAA,QAAA,IAAA,CAAA,IAAA,QAAA;AACA,AGjBF,IFOA,AEPA,KHiBE,KAAA,AGjBF,MHiBE,EGjBF,EHiBE,CAAA,IAAA,EGjBF,CAAA,GHiBE;ACNA,ADOA,AGTF,IDPA,KFgBE,AGTF,KHSE,KCNW,EDMX,AGTF,GAAA,CFEE,ADOA,CAAA,CCLW,GDKX,CCPA,EAGS,IDIT,ICPA,EAIW,IAJX,EAKW,UALX,EAMW,KANX,EAOW,MAPX,EAOiC;AAAA,ACVjC,AFWD,AGVD,CHCA,EAAY,OAAA,QAAA,IAAA,KAAA,CEFE,IAAZ,EAAwB,CFEd,IAAA,GAAI,EAAJ,CAAZ;AEF0B,AFa1B,SAAA,UAAA,CAA2B,IAA3B,EAAqC;ACTxB,ADUX,AGZA,QAAM,IHYE,CCVG,EEFE,CHYb,GCVW,EEFQ,CFER,GEFE,CAAW,EFEb,OEFE,CAAb;AFGW,ACVH,AFoBN,AGZF,ICPF,SHSa,ACVH,AFoBD,ICVI,CCVH,AFoBI,ECVD,CCVc,AFoBvB,EEpBM,CDUG,CEFH,GAAR,oCAAe,IAAf;AFGS,ACLP,AEEF,AJaI,AOvBN,AJWE,AGTF,ICFA,ADEM,SLWK,ACLF,CKRT,ILQI,CFeS,ECVF,ACLM,AINM,CNqBjB,AOvBN,ENaW,EGHG,CFFS,GEErB,AERI,ELWK,ACLM,AEES,AGV1B,CLQ6B,AKR7B,ILQiB,EAAkB,KINZ,CJMyB,AINxB,CAAD,EAAwB,CJMZ,CAAlB,CAAb;ADMS,ACLV,AECuB,AJctB,AOtBJ,AJUC,AGTG,QAAM,KLWG,ADUJ,ICVI,CDUC,ECVD,EDUT,ECVS,CKXc,wDAAvB;ALYS,AIhBb,AL0BM,AOrBO,ACJb,ALcA,AGVI,IDLJ,AGCA,ALcM,IIVO,ADAH,IAAI,CLWD,CIhBb,AGCA,ALc8B,KHWjB,GK1Bb,AL0BM,AQzBN,CPea,CMXA,ENWA,CMXuC,ADAvB,ECAhB,EFLb,ACKc,CDLd,AGCA,AFIkC,CEJlC,AFIc,CAAV,ELWS;AACA,AIfb,ADIU,AJqBN,AOhBJ,ACPA,ALYE,IEdF,AESM,SNMO,AGXH,AJqBD,EGXI,CADiB,EFEjB,ADUC,AOhBmB,GNMpB,CGXH,CCJV,ALyBI,EIrBkB,CHWT,AGXH,KCJV,kBAAA,CAAA;AJgBa,AIfb,ADSI,AJgBE,AOhBJ,ACNW,ACLb,ANgBE,AGd6C,IDA/C,AIFA,IFWM,ACNO,ALSiB,KFGjB,AGNJ,CKXT,ILWI,CHMS,ADUA,COhBN,CHAU,AGAX,CNMO,ADUP,AS3BN,AHK8C,CDH9C,AESkB,CAAZ,ACNO,ALWN,GCLgB,AIN6B,CPYvC,AEHiB,AGTsB,CEAvC,CLWK,CEdlB,CDSiB,AKXjB,AHK8C,CFMjB,AKX7B,AHKyD,IFMxC,CEN6C,CFM3B,CENW,CAHC,IFSM,ICTrD,ADSmC,CCTnC,ADSiB,CAAb;AHOE,AIfN,ADSG,AJgBC,AOjBE,ACJN,ACLa,ANeT,AGf2C,IDC/C,AGIM,ICLO,KT0BJ,EOjBgC,GPiB3B,EOjBgC,CFR9C,AEQM,GPiBF,GQrByB,ACLhB,CPSA,CGRb,CIDuD,CPSjC,COTT,IDKP,SHJN,CAAA,UGI6B,CAAC,IAAD,EAAa,GAAb,EAA0B,GAA1B;ANKzB,AFiBE,AOlBA,ACJuB,ACH7B,ACFA,APgBI,AGhB2C,KCQd,GENjC,AHCW,GEEoG,AFLhE,CHgBrC,ODNC,AFiBE,CGXK,EHWZ,EEjBU,CCMO,CAAL,CMdlB,ANcI,CMdgB,CPQT,CAAW,CAAX,CAAP,KORJ,GAAgC,UAAC,IAAD;APS7B,AFiBC,AOlBF,ACJE,ACJ4B,ACAnB,APeT,AGjB2C,IDK/C,IEKM,AGRO,AJCG,GGDkC,CNe1C,CHWC,CM5BsC,IN4BjC,AQvBiG,ALYjG,EIPP,CAAD,CPkBF,AGXI,CIPU,CAAZ,CGRO,CPeS,EOf+B,EAAxC,EPee,KAAxB,EAA+B;AELjC,ALiBI,AOnBA,ACHF,ACJF,AELF,ARoBM,AGlByC,IKF/C,ILKwB,IAHuB,EEOrC,ACJF,AELR,CJYyC,IPmB5B,AOnBgC,CFGhC,AEHP,EPmBA,AQtBI,AGTV,ERoBgB,CMhBkC,OJUhD,AGLQ,AGTV,ARoBgB,CKXK,AGTrB,CNgBa,EFIG,CKXN,ALWW,IENnB,AGL2B,EHQH,AFGC,CKboF,GLa/F,CAAV,WAAgC,MAAM,KAAtC;AEHoB,ALetB,AOpBE,ACFF,ACJF,AEEW,ARaR,AGnB0C,KCQd,GIFpB,ALHiB,CHc1B,CGjB2C,EDe3C,CLeK,EQtBE,ACJF,ANeE,GHWG,EKfY,GLetB,EWxBS,GAAwC,CVYvC,AGNA,CIJF,ACJF,AEEG,KHEF,ACJF,CLQiB,CIJE,ACJF,ERcK,oDIHP,EAAE;AJItB,AGNA,AJkBE,AOpBJ,AKbF,AJWQ,ACJJ,AEGJ,ARYM,AGpByC,IMF/C,ADUM,IJGA,ADR4B,IAHa,CMF/C,GXqBQ,AOVM,ACJJ,CLQD,AOLU,CRYP,CHWC,COpBN,ACFW,CDEZ,AKbN,CReI,AJkBE,CIlBS,AGFG,AJSD,CFDb,AMRE,AENY,ERcA,AOVM,AGDlB,ETKO,AEAO,CQfpB,AHOuB,CGPvB,AHOkB,CPQM,AMJN,ACJd,CDI0B,ALWlB,CAAe,EKXT,CGDC,CPKf,AIJI,AGDY,CTKgB,ACOxB,CAAN,ECP2B,AOLd,EAAa,GPK5B,EOLe;AVYb,AILoB,AHDtB,AEAA,AJkBA,AOrBE,AKZN,AJWQ,ACJJ,AEEe,ARad,AGrB0C,IMD/C,INIwC,EAHO,CKQc,ECT7D,ELYyC,CCD3B,CNIL,AEAA,CKRC,EFKoC,ACD5B,CPUP,AMTL,AKZN,CVeI,CAAW,AORX,CPQA,AORY,ELQZ,AIJoB,ENIJ,AORhB,CGPJ,AHOqB,CGPrB,CJWkB,ACJK,CDIO,CNI1B,EDME,AOVY,CPUQ,COVlB,ACJqB,ORcvB,CQduB,IAAA,CAAK,QAAb,EAAuB,YAAvB,EAAjB;AReE,ACNH,AEAA,AJkBG,AOtBA,AKXN,AJWQ,ACJJ,AEEF,ARaE,IStBJ,CLQiC,UJctB,CStBX,EZiCY,AQtBE,ACJJ,AECmD,GValD,CDYK,AS1BZ,CDII,CIXR,AJWoB,ALWhB,GHWQ,CQtBJ,CPUF,AOVmB,EAAE,CPUL,GWrBtB,CAAA,IXqBM,COVmB,EAAQ,MRsBQ,CQtBD,GRsB5B,CAAN,AQtBsC,EAAE,KAAN,EAAa,EAAE,KAAf,CAAf,EAAjB;APWH,AITQ,ALMX,AOPA,AKXF,AJWQ,ACJL,AEED,ARaC,AGnBC,IMHJ,ILWM,ADRI,KLeN,AINS,CMHF,CCTX,CNGkB,EEQJ,CPUH,CMVJ,CAAD,CCAE,AGFG,CJEO,AKXlB,CLWM,CFCO,ACTc,GDSd,GCTK,CKMP,CCTX,ADSsB,ALNa,CMHnC,CNGkB,CAAd,CKMO,CAAT,ENGW,YMHuB,KAFyB;AVevD,AITO,ALqBZ,AOvBK,AKVN,AJWK,ACX6C,AEShD,ARC4B,AGP1B,AQPJ,CXcA,GSVA,AEJA,CLIgC,GHGtB,KDSG,EEF4B,AKVzC,ADSS,CLNU,GCO0B,CNWjC,AITC,AEFP,CDPkB,EDSX,AOZb,ANGmB,CQPnB,EbyBkB,AKlBW,EAAzB,EDSS,AMHH,CVYa,CazBvB,CFIA,CAAA,CDSS,EAAiB,IVYR,CAAgB,IAAhB,CAAqB,OAArB,CAA6B,CazB/C,CAAA,GbyBoD,kBAAlC,CAAZ;AACA,AIlBY,ALYlB,AONM,AKRN,AJC+G,ACH/E,AEU5B,ARcS,AGpBT,AQPJ,CLGA,GGEM,AELN,CPSiC,ACHJ,GRa7B,AGQa,GGpBF,EDAO,ACAN,KNYZ,AWNU,CNNQ,EJkBP,ADNX,AGQa,CEpBuB,AOFf,CDQjB,CNNc,AMMF,ARca,CGpBlB,EAAQ,AQPnB,CZEU,ASWN,ARc6B,CFF3B,AWpBe,ADQA,CPKT,CJCZ,AWNuB,ARcM,CFFP,EEGnB,CSvBkB,AELrB,CFKqB,CXoBM,AEEE,AGpBlB,CMFU,ATuBd,CGrBkB,CMDlB,CDOc,EAAQ,IVYP,CAAgB,CWnB/B,ENCI,CLkBW,CAAqB,AKlBvC,EKMiB,EAAjB,EVY6C,CAA3B,EAA8B,AazBpD,CAAA,GFKqB,EAEd,EXkBD,QWlBC,CToBsB,EACqB,OADrB,EAE1B,GAF0B,CAEtB,GSxBc,EAGd,OAAA,gBAHc,EAId,OAAA,gBAJc,EAKd,GTiBsB,EAEsC,ISnB5D,GTiBsB,CAAhB,aStBQ,CAArB;AXqBK,AIRD,AHfA,AEgBA,AGLF,AKDF,AJP6B,ACM7B,AEEI,ALNH,AOTD,ACGA,ACFa,CPMb,AFLA,GOFA,ACGM,IPYA,AKDE,AHDR,AMZa,GHab,CPKU,IDCA,EOLA,CTXC,CEgBG,AGLP,CAAD,AKDa,ACdnB,CFeI,CJAc,CLXF,AKWV,CFIiB,ADCJ,CWnBN,CNYb,CGC0B,AHDN,CPThB,AWJJ,AECkC,CXmBpB,CAAW,CQNN,CPKY,AOLA,GPKR,ADCO,CCDK,EUlBA,CNYnC,GJMuB,AINY,CJM/B,CDCqB,GAAiB,AQNvB,CRML,CAAV,AQN4C,CGbd,ENYE,GGCpC,ACdA,CJamC,AIbnC,kgDCGA;AbyBG,AIRC,AHfD,AEgBC,AGNE,AKCO,AJEb,ACLmC,AEGhC,ALLU,AQwBb,AClCkC,IPiB5B,AMiBA,IFnBO,ANLA,GGEwC,CJO7C,CAAC,EELgC,EHMhC,IGNsC,CHM3C,AGNE,CFKF,ADCW,ECDM,AOJR,CJEe,AFPf,EFUO,AQLa,CNLqB,MEOhD,EJGS,CQLmB,ERKF,CAA5B,IAAiC,AQLJ,EAAkB,ERK/C,EQL6B,EAA8C,CJEnD,CAAC,IAAD,EAAa,GAAb,EAA0B,GAA1B,mCOZ1B,aAAa,GAAb,CAAiB,UAAC,QAAD,kGD6BnB;ATdM,ADCF,AGPE,AKEF,AJCwB,ACJ1B,AEJ2D,ALEzD,AQuCJ,AC7CmB,ACJnB,IHGA,AC8CM,AEjDA,CLQa,GCOT,CNN4C,EEO6C,CIDrF,EHHN,GLQC,CCDG,GQfV,CRec,CWnBS,GZoBrB,AEVM,CDSE,COJkB,AHJuB,GHFC,CUThD,CVUiB,EMKT,CAAV,SCVS,GGLY,CAAC,CHIxB,CEC2B,CFChB,EGNY,CXmBnB,GQfJ,EAGW,AEFyB,KADnB,IFAjB,EAIW,IAJX,EAIsC,gCEFZ,SAAS,IAFlB,6CAGU,SAAS,KAHnB,yFD6CnB;AT7BK,ADCD,AGb6B,AKQ7B,AJCA,ACJF,AELiB,ALGX,AOHgC,AC+C3B,ACnDM,ACJM,CTQzB,AIAA,IIJE,EAIS,CHQH,AEuCK,CFvCT,EAAO,AGZT,ACHE,CDOY,GNKP,AHFM,CSPb,CALgC,CPiBiE,CJKxF,CAAP,AUkCS,CR5CQ,EQ4CO,GR5Cb,CAAY,GGEjB,CHFK,EACF,EGCJ,CHFM,CGEW,AHDT,IQ2CW,CEtDI,KVWd,CAAD,AUXqB,IAAlC,OFsDwB,CAAmB,KAAnB,CAAyB,KEtDC,CFsD1B,CAAf,IEtD+C,KAAxD,WAAkE,MAAM,KAAxE,2CADqB;AXqBrB,ADCD,AGNH,AKCQ,AJCJ,ACJA,AEGJ,ALLiB,AQ6CJ,AC1DqB,ACCT,ACAzB,CFDa,ACCb,GTgBM,AICA,AMjBA,IHyDO,ITpCH,EGHA,AMuCG,CFxCE,CHHL,CFES,AKCF,ADAE,AGwCG,ER7CE,EMKT,ANLW,AQ6CA,CFxClB,AJCE,CSlBe,CZqBH,AIPJ,AK2CI,CR7CE,CCIlB,AICA,CLLW,AQ8Cd,ETrCwB,AIPJ,CAAL,AK2CI,CL3ClB,AK6CA,Cb/BY,AOVN,ASlBJ,CTkBe,GDFF,AICA,CJAjB,ACCQ,AGDU,EVWS,CIPP,CAAiB,AELpB,ACEU,AGDV,EJCjB,AID8B,CHDmE,GHK7E,AELH,CICA,AMjBM,CZqBsB,AEF7C,AOsCoB,AGzDI,EH4DtB,CP5Ce,EUhBM,KZqBH,EAAqC,QAArC,CAAlB,ESuCA,YAAA,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,aAA1C,CAHkB,EAKnB,GALmB,CAKf,MALe,EAKP,qBAAA,YAAA,CAAa,KAAb,CAAmB,QAAA,YAAnB,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,QAA1C,CALO,CAAT;Ab5BT,AIPA,AENe,AKEd,AJCD,ACJA,AEEe,ALLF,AOPJ,AESb,ACVa,ACJY,QDIZ,CVOE,AONF,ENeM,AIH6C,ALJnD,AWZT,GJIS,CLcF,CPUH,CKlBO,AONF,CRiBC,AIPJ,AHFU,EUTP,CfyBT,CYxBS,CZwBE,AezBa,CXkBxB,AIPA,CJOiB,AIPJ,GJOb,ACTiB,CDSI,ACTL,CDShB,AGHQ,EHGgB,CWlBC,ERelB,EAAiB,EQfA,EXkBS,AIPjC,CJOwB,AIPM,AQdF,CZqB5B,IIPA,CQdkC,IAAlC,mBAAkD,MAAM,KAAxD,WAAkE,MAAM,KAAxE,2CADqB;AhB8BnB,AIPF,AEFF,AKDE,AJAI,ACJL,AEED,ALLkB,AOPP,AKNb,AHea,ACXe,ACJH,CAAzB,GCAA,IHea,CFTA,CDcH,GPGD,COHK,CCdD,AKNb,CVoBc,EDAK,AIH6C,AEXnD,CRiBT,AOHM,ANPiB,CDUX,AGHE,GUpBlB,CjB8Bc,AIPV,AQjBS,AESA,CVQQ,ACVY,CEOT,CPUlB,AKjBc,ASEY,CdgBrB,GOXO,CAAY,CPWd,AWXe,AMpB/B,CbuBI,AavBJ,CVoBkB,EPUZ,AOVE,AOLyB,GHKvB,CGLsB,EAA8B,GdgBtC,KAAK,AchBG,EAA0D,EdepF,GWVF,gBXW2C,QAAA,IAAA,CAAK,GevB1C,GfuBgD,IAAX,AevB9B,CfsBX,GetBI,CAAY,GAAZ,CAAgB,EfwBhB,MAAM,KAFV,GetBI,EAAkC,IAAlC,CAAuC,IAAvC,CAJkB;Af+BvB,AIXF,AHzBH,AKuBE,AKDD,AJAO,ACV6C,AEQnD,ALNkB,AONP,AKNb,AHeE,ACZ0B,ACAf,CLUA,AIVA,GEHb,CTUmC,GPZnC,AaiBQ,AEZK,CXOE,AOJF,EPOA,ELeT,CUVO,ALRI,CAGE,AYbjB,CVoBc,EKdD,AESK,CdmBP,AgB/BE,CTiBK,CKdL,CXRb,AKuBc,AIHH,AMfgB,CCH3B,EhBFA,AIekB,CEOM,AFPP,CSET,GRMM,AMfD,CTiBA,AIHK,CAAY,AGFnB,AMfiB,CNeN,AOlBtB,CAAA,AHekB,CPKA,AOLC,EPKX,AGFG,AMfgB,CNezB,CTpBF,AaiBkB,CRMJ,CAAW,IAAX,CAAZ,MIHkC,KJGA,AIL4B,GJG7C;AYnBnB,AlBmCM,AGXF,AGFF,ACDM,ACX2B,AESjC,ALNe,AONJ,AKNb,AHckB,AEZS,CRO3B,GUVA,ADCA,KLMa,IAAA,CKNb,CCDA,AZsBS,AIHA,AIJyC,CXSxC,ASjBG,AEST,EPKU,CFRU,CFWV,ASjBD,CESJ,CGfT,CCDA,AXqBQ,CPcM,AOdM,CJGD,EHWb,CAAe,AOdb,CAAiB,CJGX,AGFJ,AIHA,CPKe,AIHE,AUpB3B,CAAA,AHeI,CdmBsB,AcnBL,CTHkB,CCS9B,AIHA,ALNe,CFWM,AEXb,CLsBX,AMboB,AIHA,AIHtB,GIhBJ,CAAA,AXqByB,EAAQ,EJGR,CHWS,EGXQ,CAA5B,CAAV,AIHoC,AOLJ,CdmBG,GOdK,CPctC,AcnBmC,CPKK,KAAN,CAAf,EAAjB,EOL4B,CAAiB,IAAjD,GAA0D,EADZ,EAE9C,UEVM,GFUO,GEVD,EFUM,EEVZ,CAAW,GAAX,CAAe,CFUrB,GAA6B,UAA7B,EEVM,CFUoC,CEVH,CFQO,EAG9C,CEXM,CAAsC,IFQE,AERxC,CFWC,AEfgB,UFef,CAAD;AIhBX,AlBkCK,AGXD,AGFA,ACDI,ACJR,AEEI,ALPa,AOLX,AKLN,AHeW,AEfgB,CAAd,GEDb,ADCM,ITeN,CHRe,CAAP,KaRR,CZqBU,AIHA,COjBS,CVmBL,CJGH,AWPO,CXOd,AGFU,ECDN,CWpBR,CRkBkB,CIFM,CRKJ,AWpBd,CTeN,AMAW,CNAS,EEEI,CJGV,CAAY,GAAZ,AIHI,CAAY,AOjBX,CAAC,CXoBY,CIHd,CQlBlB,CAAA,AVgBA,AEEI,AOjBe,EXoBf,CELgC,UAAC,IAAD;AUfpC,AlBkCI,AGXD,AGFC,ACDC,ACL+B,AEGhC,ALPC,AYXc,AHeR,IIfX,KJYkD,ENGI,AMA1B,GIf5B,CJYkD,CRSxC,AQNuB,CdmBxB,CUhBC,CINwC,CRSpC,AQTI,EIZlB,ClBkCI,CAAY,AUhBZ,CAAa,CJGG,EIHhB,CAAiB,EJGP,CNaV,AMbsB,CNaD,CUhBrB,CJGU,AWpBU,CPiBI,EVgBxB,AMb4B,EWnB3B,CCFL,ARkBI,CQlBJ,CZqBI,AWpBoB,CACf;ACAT,AlBiCG,AMbC,ACV+F,ACIjG,AEGE,ALdkD,AOGtD,AKNS,AHUS,CTPL,GaHP,ANMA,CLIsB,AOA1B,GGVU,IAAH,CCAM,CVcP,EFME,CYpBS,CRiBT,EOjBE,EPiBR,EEXsB,AKNjB,ECAU,CZoBE,EEPiC,EJOzC,CcpBE,CAAW,ANMpB,MNc2B,GYpBP,AZoBL,EAAiB,CAAjB,EAAoB,CAApB,CAAjB,CMdsB,CAAC,GMNZ,CNMW,CMNc,CNMwB,QMNxB,MAAzB,CAAf;AAEa,AdmBT,AEAA,ACXwB,ACK1B,AEGC,AEXD,AKPO,AHcP,CPJF,OWRa,ANKL,AKPU,KAAT,CCEI,CVaJ,CJMC,CcnBY,CZmBZ,GWrBQ,CXqBd,CAAW,GWrBN,CCEc,ENKM,CMLP,AVaZ,CJMe,CcnB+B,EZmB9B,CENjB,CJMqB,CINJ,CFMX,GAAkB,AQJ7B,KAAK,EVIL,CUJA,CRIA,AQJS,UAAC,IAAD,cFVX;AMJA,AdiBW,AEEV,ACDH,ACLI,AEL4D,AEH9D,AKRO,AHiBI,IPIP,CGVa,GQRb,ANKE,GLaK,EKbA,GMLC,AdmBF,AINF,IUbR,AXkBI,EWlBc,EXkBP,ACLK,CDKJ,CHDD,EDtBH,CCwB2B,AINd,CDKV,ACLK,CAAd,CDKyB,AKbG,GKRmB,CLQtC,AEUE,CFVsB,EKR5B,EboBI,AGCA,AKbA,CRcD,AQdV,EEUqB,IAAR,CADF,CGjB+C,EboB/C,GapBJ,mCHmBmB,KAAK,QAFpB,wCAGW,KAAK,WAAL,CAAiB,IAH5B,wCAIW,KAAK,IAJhB;AIbT,AdgBS,ADrBT,AGee,ACON,ACJT,AENe,AEFjB,AKTO,AHiBI,CJNb,EOZwB,EXWL,AWTd,AHgBD,EAOG,CFfD,CKVkB,CAEd,CVoBuD,AOJ7D,CIbI,ADLgB,AHyBZ,CG1BO,ELWN,CRaW,AULpB,CAHF,CNGQ,CLlBC,ASUT,EMLE,ANKe,GMLC,AdgBP,ADrBG,AKkBZ,CAAa,EJKoB,EDvBjC,GeKgB,OlB+BK,AIfZ,CAEW,CILpB,CAA8B,EUbd,AlB+BgB,CkB/BH,EVa7B,CJGS,GchBO,CAAhB;AACA,AlB+BA,AGpCD,AGUgB,ACYf,ACJD,AEGH,AEZmB,AKXA,AH8BlB,CRlBD,AWZA,AHWa,GJYP,QQhBI,EXiBA,EPcA,AUfQ,EQhBF,IlB+BA,AOdN,GGDJ,CHCI,AKZiC,CMLlB,AlB+BJ,AOdN,GADkD,EKXhB,EFW/B,CAAC,CEXwB,CZ0B3B,AY1BsC,CZ0BtB,CUfd,CQhBF,CACV,AReyB,CVef,CAAqB,AY1BuB,EAAjB,CFWzB,AEZC,CZ2BH,CAA0B,akB/B1B,CAAZ;AAGA,AlB4BsC,AIbtC,AEEJ,ACFI,ACVkD,AEQpC,AEZC,AKNnB,IXsBM,AWtBA,CTU8B,MEQ2B,CQbvD,EXeE,CWfN,CdeM,AEEQ,CYjBL,CDLO,EVkB6C,GPef,EMX5C,EWtBA,CjBiCiD,EIb/B,IEEN,CAAC,CNW+B,EiBjC9B,CXsBF,AWtBG,EjBiC+C,EIb/B,CJaK,AiBjCtB,EAAe,OAAf,QboBhB;AcdE,AlB2BoC,AIZtC,AECc,ACDd,ACXgC,AESlC,AEbiB,AKNC,CTUpB,UFYkD,CMfvC,CZ0BK,CAAZ,COZO,AKfQ,CMAT,ERYqD,KQZzD,CdeU,EcfI,IXeR,KHAR,AGAO,CHAiB,CGAA,CWfH,EDLD,CboBpB,CAA8B,QapBA,IboB9B,KapBoB,GAAsB,EAD1B,wBAER,MAAM,IAFE,SAEM,WAAW,MAAM,IAAjB,CAFN,qBAGhB,SAAA,gBAAA,CAAiB,MAAM,UAAN,CAAiB,IAAlC,EAAwC,MAAM,QAA9C,CAHgB,YAIhB,QAAA,WAAA,CAAY,MAAM,KAAlB,CAJgB,YAKhB,SAAA,YAAA,CAAa,MAAM,MAAnB,CALgB;ACOZ,AlB2BJ,AIZD,AECD,ACF0B,ACH5B,AEEE,AEdiB,AKNC,CAApB,WLOgB,EFaL,EVcH,CAAC,CY5BU,EZ4Bf,AMZ8C,ENYpC,AUdH,CQbI,IAAP,KRaG,CAAW,GHEU,CGFrB,CAAT,IHEoC,MAAN,CAAa,EGFV,CHEH,CAAiB,GGJc,EHI/B,CADJ;AWbpB,AlB2BF,AMXJ,ACH0B,AGA1B,AEfiB,AKGN,QAAA,ILFW,GNiBf,AIHA,CHCO,GKhBG,CLeS,AUZf,EjB0BD,CiB1BgB,CCDpB,ElB2BQ,IkB3BR,AZgBE,AIHA,CQbK,AlB2BH,EiB1BiB,CCDrB,CZgBC,AIHA,EJGiB,AIHA,EOZE,EVaZ,IADY,2BPcgC,GAAhD,CAAN;AkB1BC,AlB2BF,AMXD,ACJwB,AGCxB,AEhBe,AKGS,YLFK,CMD3B,CNAa,ELgBG,AGAZ,AOZR,EXeQ,GCJkB,CDIxB,CAAW,CIHG,COZhB,EXeE,GIHoB,MAAN,CAAa,GAAb,CAAiB,CHAb,CUZpB,CAAmB,EPYH,CHDU,AGCxB,IOZwB,YAA1B,CAD0B,6FAMpB,OAAO,MAAP,CAAc,MAAd,GAAuB,CAAvB,2EANoB,yCAYpB,OAAO,MAAP,CACC,GADD,CACK;ACZR,AlB2BD,AG7CJ,AGkCG,AIHC,AEjBe,AKgBN,Qd9Bb,Gc8BsB,CLfe,EADlB,IFiBT,CVcC,CG7CX,EH6CI,CG7CJ,AO+BI,AOD8B,CPClB,IAAZ,AODkB,CPCD,CODoB,IPCrC,CP/BJ,Kc8BmD,CbEzB,MaFgC,CbEnB,WaFjB,CAAT;ACXV,AlB2BA,AIbC,AEH8C,ACC1C,AGCJ,AOFS,GADL,ECrBN,AZsBgB,AWCT,IAFD,CAEM,CCZL,GDUD,CAZoB,CbgBlB,EGFI,AGCJ,IAAN,EHDI,CAAa,GAAb,CAAiB,EHEA,GGFjB,EAAwB,EAAE,UHET,AGFO,EAAQ,OAAO,IHEtB,CAAc,GAAd,AGF8B,CHEZ,KAAlB,CAArB,EGF4B,EAAxB;AWXJ,AdcA,AEJc,ACEV,AGCL,AEjBC,AKCwB,CXa5B,AWba,WLDH,IMIE,AdcJ,EGFM,EWZV,CAAa,CXYT,CKhBa,KRkBjB,EAAkB,EQlBQ,MAAT,EAAiB,EAAjB,CAAjB,CMIA,EAAsC,GAAtC;AACD,AdcG,AEEN,ACJK,AGP0D,AET3D,KFSc,GJWlB,IMpBU,OAAO,CRkBL,IEEZ,CAAiB,AMpBM,ERkBJ,AQlBF,ENoBjB,CMpB4B,CAAC,CRkBL,AEEA,CMpBI,CAAX,GAAkB,ERkBhB,CAAa,EEEP,AMpBe,CAAC,EAAD,CNoBhB,AMpBW,ENoBK,CMpBO,EAA3C,ERkByC,SAA1B,CAAb;AcbL,AdcK,AEEJ,ACZ+D,AGA/C,AERd,CMXS,ARmBb,IHAa,GDYL,IMpBE,GNoBK,KFFH,IEEY,EFFN,AQlBM,EZdA,CMkCK,CAAL,CAAT,EAAkB,EAAlB,CAAb,GFF6B,EQlBP,ERkBN,CAAkB,IAAlB,CAAZ,SQlBkB,CAAkB,OAAlB,EAA2B,IAA3B,CAApB;AMMJ,AlBnBI,AIgCE,AEEJ,ACbW,AGUb,AEjBI,CLOJ,MWFO,IZeE,EYfT,ENLW,CMKK,CNLH,EZdF,CIgCD,CEES,EFFb,CcbU,AlBnBA,CIgCD,AEEN,CAAP,IYfF,KNLW,EAAY,CZdZ,CAAoB,KAAK,QAAzB,CAAP,QYcO,EAAyB,UAAzB,EAAP;AZbD,AIgCK,AEEP,ACJD,AGCA,AEjBG,CNiBH,AIAC,QAAA,IAAA,CAAK,GAAN,EAAW,MNCE,EMDF,IAAA,CAAK,IAAhB,CNCQ,CAAkB,AMDJ,KNCd,CAAwB,EMDV,ENCd,CAA6B,CMDf,CAAK,CNCnB,IMDR,EAAkC,QAAA,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,gBAAO;ANEvD,AEGP,ACLA,AGCE,AEhBA,CLeD,ODKD,AIJQ,AEhBA,CLeP,GGCW,CHDX,CAAK,GAAN,EAAW,CGCC,IJIZ,CAAiB,ECLN,EKfkB,CFgBjB,CJIZ,ACLW,AGCY,CHDP,EDKU,CIJd,CHDZ,AGCE,EHDoB,QAAA,IAAA,CAAK,KAA3B,EAAkC,QAAA,IAAA,CAAK,CKfrC,KLeF,EAA+C,OAA/C,CAAuD,UAAC,IAAD,EAAS;AHG1D,AEEoB,ACJtB,AKfF,QLeQ,AKfF,GNmByB,CCJnB,CKfD,OLeC,CHEH,SGFG,CAAW,CKfO,CRiB1B,CAAkB,CGFV,CAAV,AKfS,CAAwB,CRiB/B,GQjBO,CAAX;ARkBG,AEEH,ACHE,AGH0D,AEb5D,QAAI,ILgBF,CHNA,EQVS,IRiBF,AQjBT,EAAiB,CNkBc,MCF7B,CAAoB,CAApB,CGAO,CAHmD,UHG5B;AHE5B,AEEJ,ACJgC,AGC9B,AEjBe,eNoBV,ACJ+B,CGCpC,INCQ,OQjB+B,ERiBtB,CEEX,GIHN,AEhB6C,CRiBvB,AMDD,CJGhB,AIHL,CHDyD,CKflB,CAAW,ELed,EAA2B,CHE9C,CAAe,AQjBwB,EAAjB,CLeH,AKhBrB,ERkBE,AGFqD,AGCvC,CNC7B,AMDF,IAAsC,KHDiC,CAAD,EAAI,CAAJ;AHGpE,AECG,ACJiE,AGChC,AEjBvB,mBNoBQ,ACJyD,AGCpC,CNEpC,GGH4E,CAAd,CDIzC,GFDd,EMFwC,CJGhC,EFDH,AECf,CIHuC,EAAiB,CAAjB,CAAN,ENEvB,CAAa,OAAO,SAApB,CAAb;AJxCN,AIyCM,AEAG,ACJiE,AGChC,AEjBvB,QZrBnB,COqCwC,AGCpC,CHD8B,EKfvB,CZtBX,GAAA,AYqBmB,IRoBP,CJzCZ,OIyCoB,KAAK,WAAL,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,KAAhC,CAAd;AACA,AEH2B,ACFC,AGH4B,AEb3C,KNkBO,ACFtB,OKfY,OADG,ERqBR,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,AEJoB,ACDtB,AKjBe,CNkBnB,WCDI,AKhBoB,QADL,QLiBf,CAAoB,CAApB,YAA8B;AHM5B,AEAN,ACNkC,AGDhC,AEhBiB,CNuBlB,QAAA,AIPM,GEf0B,CNsBhC,AIPU,CJOL,AMvBa,CLiBqB,EDMxC,AIPe,CAAb,CJOS,CFAC,AMPM,IAAI,CAApB,EJOS,AIPc,ENOJ,CMPnB,CJOS,CAAK,AIPc,ENOJ,EEA1B,ACN6D,EDMvC,ECNkB,EAA2B,IHM9C,AEAC,CFAiB,AGNC,EAAkC,CDMpD,CAAK,EFArB,GEAN,EAAkC,CCNyC,CAAD,EAAI,CAAJ,GDMxC,IAAA,CAAK,MAAvC,EAA+C,OAA/C,CAAuD,gBAAO;AFCxD,AEAJ,ACPwE,AGD5C,AEhBX,QNwBX,IAAI,AMvByB,EFe1B,CAAmB,AEhBX,ILiBiE,CDOxE,EFAD,CGP6E,CAAd,KHOpE,CAAa,AEAP,CAAW,IAAX,CAAV,IFAkB,GAAD,EAAM,KAAN;AAAA,AEEjB,ACTwE,AGCvE,KJQA,IAAD,ACTsC,CAAN,CDSzB,IAAP,EAAa,IAAb,EAAmB,IFFc,AEEjC,EAAyB,IAAzB,CFFwC,CEET,EFFE,CAAW,IEE5C,CFFiC,AEEM,EFFY,GAAlB,CAAhB,SEE4B;AFF5B,AEGf,ACV8B,AKf9B,KLeA,OKfM,INyBN,CFHE,OQtBe,QNyBjB,CMzB0B,OAAT,CNyBM,CAAvB,AMzBkC,EAAjB,CAAjB,QNyB8B,GAA9B,IAAuC,UAAC,IAAD,EAAgB;AFFtD,AEGC,ACVF,AGL0D,AEV1D,YLeA,AKfM,INyBE,IMzBK,GNyBE,GMzBI,ELenB,CAAoB,CAApB,AKfiC,ENyBT,CITjB,CANmD,CEVvC,CAAoB,CNyBV,CAAL,CAAT,CMzBI,CNyBc,AMzBpB,CLeiB,CDUf,CAAb,AMzB6C,EAA/C;ARuBD,AEGG,ACX4B,AGE9B,AEhBA,YAAM,GLc8B,CGEpC,GJSS,QMzBW,GNyBA,GITpB,CJSS,AITY,CAArB,CJS0B,ACX+B,IDWhD,ACX2B,EDWJ,ACX+B,AKd3C,GNyBX,CAAP,CCXkC,EAAkC,AGEvC,CAA/B,IAAsC,KHFiC,AKdnD,CLckD,AKdhC,ELcoC,CAAJ,KKdlD,EAA2B,KAA3B,CAApB;AN0BC,ACZqE,AGEhC,AEftC,SNsBA,MMtBO,EAAE,ELauE,AGEpC,IHFwC,CAAd,MGEf,IAAX,EAAiB,AEftD,CFeqC,CAAN,AEfnB,yBAAZ,EAAyB,WAAzB,EAAP;AN0BD,ACbuE,AGEhC,AEdvC,KNoBD,ICRsC,AGEpC,CHF8B;ADehC,ACfgC,AGG9B,AEbF,KLUE,KKVI,ENyBN,EMzBU,EFaR,GEbI,SNyBN,CAAoB,CAApB,GIZE,CAAqB,CAArB,MNOsB,EQpBa,ENyBJ,EMzB3B,CRoB4B,AMPF,AEbhC,CFaE,IAAqC;ANQrC,AEI+B,ACd/B,AGEqC,AEZxC,CAtBD,WLgCI,GDcsC,CFJhC,GMRqC,SHF3C,CAAoB,AGEiC,CHFrD,CHUqB,EMRsB,EAAgB,CAAhB,CAAN,KHFP,MHUT,aAAA,CAAc,GAAd,CAAkB,KAAlB,CAArB;AACA,AEIA,ACf8B,AGEO,AEV5B,QAAA,CFUT,MHFoC,CHWhC,IQnBK,ENsB6B,CMtBA,KRmBtC,EAAkB,MGXuC,IAArB,EAA2B,KAA3B,EAAkC,UAAC,CAAD,EAAI,CAAJ;AHYpE,AEIF,AChBsE,AGNZ,AED5D,SADwC,SNwB7B,CAAT,AChBgF,CHYxE,GGZ4E,CAAd,EKNtE,INoBsC,GFFjB,KAAK,AQpBY,EAGtC,KRiBqB,AQpBiB,CRoBJ,CQhBlC,MAJsC,EAKtC,IRe+C,KQpBT,EAMtC,ERcqB,CAAnB,EQpBoC,EAMzB;AReX,AEIF,ACjBsE,AKAtE,SLAoC,CAAN,EKAxB,ONiBC,AMjBM,CRaL,KQZL,KADU,CACJ,CRYW,EEIZ,CMjBK,ERaY,AQXtB,ENeI,CMjBM,CNiBW,AMfjB,QRWa,CAAkB,KAAlB,CAAwB,GAAxB,EAAlB;AACA,AEIA,AClB4B,AGAhC,AEES,KLFP,IGAG,IAAI,IAAI,CAAb,CEEc,CRYJ,AEIA,AIlBM,CEEA,GFFI,CAApB,AEEc,EFFS,AEEd,CRYS,AEIA,EIlBlB,EAA4B,EJkBJ,GFJd,EEIQ,CAAY,GAAZ,EAAd,oBFJ4B,UAAtB,EAAN;AACA,AEIA,AClBF,AGD0B,AEEnB,SAFM,EAGV,CLFH,GGDO,CAAmB,CEAb,CAGH,ERYF,EEIA,IFJM,EEIZ,AClBF,CDkBe,AClBK,CAApB,IDkBE,KFJyB,GGdG,CHchB,CAAkB,IAAlB,CAAZ;AACA,AEID,ACnB6B,AGE/B,AEAW,eLF0B,IKErB,CRaT,GAAJ,EAAS,AQbU,EAAX,QLF8C,IAApB,EAA0B,KAA1B,EAAiC,UAAC,CAAD;AHgBjE,AEHkC,ACb+B,AGGxE,AEDa,CFTd,QJoBmC,AMdlB,EAIV,GAJU,CAIN,ILHqE,CAAE,CAAT,IHgB5D,YAAL,CAAkB,KAAlB,CAAwB,IAAxB,CAA6B,GAA7B;AACD,AEJ4B,ACbsC,AGKzE,AEFW,KNUT,GIRF,CHLwC,CAAN,SKGlB,MFEhB,CAAkB,SAAlB,EEFkC,CFEJ,AEFd,CAAL;AReL,AEGL,ACrBiC,AGKJ,AEFnB,CNAX,ICHI,IKDa,CAAb,CFMgC,UNazB,CMboC,QAAA,GNazC,CAAkB,AMbuB,CAAK,GNa9C,AMb8B,EAAqB,CAAC,CAAtB,CAAN;ANczB,AGjBD,AGG0B,AEA1B,CFAJ,WHHI,CHQA,EQLO,IRcA,AQdI,SLHX,CAAiB,IAAjB,AKGO,CAAmB,ELHF,GKGjB,EAA0B,KLHR,CKGlB,EAAkC,CLHjB,EAAgB,MKGjC,EAA6C,IAA7C,CAAP;AReE,AGjBE,AGIR,AEDG,QFCH,IHJc,QHiBF,AGjBU,KGItB,CAAkB,GNaG,AGjBU,AGI/B,GAAwB,ENaE,AGjBU,CAAL,CAAT,EAAkB,EAAlB,CAAd,CGIiB,CNaJ,CAAe,EMbZ,GNaH,CAAf;AACA,AGjBE,AGGgB,AEhBkB,CAA7B,UFgB0C,CHHzC,QHiBF,IGjBc,SAAS,CHiBV,IGjBe,CHiBV,AGjBK,CAAT,EAAkB,EAAlB,CAAlB,CHiBiB,CAAa,OAAO,SAApB,CAAnB;AACA,AGjBE,AGGN,cAAM,CHHO,IGEwC,CNe3C,AGjBQ,KAAL,EAAY,MHiBH,GGjBT,CAAP,CHiBqB,YAAL,CAAkB,KAAlB,CAAwB,GAAxB,EAAlB;AACA,AGjBD,AGGH,KHPE,UGOK,KNcG,UAAQ,AMdV,KAAD,EAAiB,GNcd,4BAAsB,WAAtB,EAAN;AACA,AGhBL,AGEG,CHjBJ,eGiBU,INcE,IMdM,INcE,CMdG,CAAL,CAAd,ENcqB,WAAL,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,MAAhC,CAAd;AACA,AMdF,kBAAM,GNcC,EMdP,CAAY,GNcV,CAAY,AMdd,CAAiB,EAAE,CNcjB,CAAiB,IMdM,CNcvB,OMduB,IAAA,CAAK,QAAb,EAAuB,YAAvB,EAAjB;ANeE,AMdF,kBAAM,IAAN;ANeE,AMdH,oBNcS,SAAS,KAAK,YAAL,CAAkB,MAAjC;AACA,AMrBiD,KAA/B,kBNqBb,OAAL,CAAa,UAAC,GAAD,EAAM,KAAN;AAAA,AMrBK,CAAxB,0BNqBmC,OAAO,GAAP,CAAW,KAAX,EAAkB,GAAlB,CAAhB;AAAA,AMZnB,iBNYM;AACD;AACF;;;iCAEe,OAAa;AAC3B,iBAAK,MAAL,CAAY,GAAZ;AACA,gBAAI,KAAJ,EAAW;AACT,qBAAK,YAAL,CAAkB,KAAlB,CAAwB,IAAxB,CAA6B,KAA7B;AACD;AACD,gBAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,sBAAM,MAAN;AACD,aAFD,MAEO;AACL,qBAAK,YAAL,CAAkB,IAAlB;AACD;AACF;;;oCAEmB,MAAc,MAAkB,MAAa;AAC/D,mBAAO,IAAI,QAAA,KAAJ,CACL,IADK,EAEL,IAFK,EAGL,KAAK,IAAL,CAAU,CAAV,EAAa,QAHR,EAIL,IAJK,EAKL,IALK,EAML,IAAI,eAAA,YAAJ,CAAiB,KAAK,KAAtB,CANK,EAOL,IAAI,iBAAA,cAAJ,CAAmB,KAAK,MAAxB,CAPK,CAAP;AASD;;;kCAEiB,GAAS;AACzB,gBAAM,SAAS,KAAK,OAAL,CAAa,GAAb,CAAiB,CAAjB,CAAf;AACA,gBAAI,CAAC,MAAL,EAAa;AACX,sBAAM,IAAI,KAAJ,OACA,CADA,yBACqB,MAAM,IAAN,CAAW,KAAK,OAAL,CAAa,IAAb,EAAX,CADrB,CAAN;AAGD;AACD,mBAAO,MAAP;AACD;;;gCAEe,MAAY;AAC1B,gBAAM,OAAgB,EAAtB;AACA,gBAAM,QAAQ,KAAK,YAAL,CAAkB,KAAhC;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAApB,EAA0B,GAA1B,EAA+B;AAC7B,qBAAK,IAAL,CAAU,MAAM,GAAN,EAAV;AACD;AACD,mBAAO,IAAP;AACD;;;4BA9Ge;AACd,mBAAO,KAAK,MAAL,CAAY,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAjC,CAAP;AACD;;;;;;AALH,QAAA,MAAA,GAAA,MAAA","file":"scripts.4a13d125.map","sourcesContent":["import { Frame } from \"./Frame\";\nimport { Instruction } from \"./input\";\nimport { Value } from \"./runtime\";\n\nexport interface Constant {\n  index: number;\n  type: string;\n  value: string;\n}\n\nexport enum Type {\n  Constant,\n  // Numeric\n  Int,\n  Long,\n  Float,\n  Double,\n  Char,\n  Short\n}\n\nexport function typePrefix(type: Type): string {\n  switch (type) {\n    case Type.Int:\n      return \"i\";\n    case Type.Long:\n      return \"l\";\n    case Type.Float:\n      return \"f\";\n    case Type.Double:\n      return \"d\";\n    case Type.Char:\n      return \"c\";\n    case Type.Short:\n      return \"s\";\n    default:\n      throw new Error(`Unexpected type ${type}`);\n  }\n}\n\nexport interface Instruction {\n  type?: Type;\n  code: string;\n  apply: (frame: Frame) => void;\n}\n\nexport interface InstructionInstance {\n  position: number;\n  instruction: Instruction;\n  args: any[];\n}\n\nexport interface InstructionBuilder {\n  [index: string]: (args: any[]) => Instruction;\n}\n\nexport interface MethodBody {\n  stack: number;\n  locals: number;\n  args_size: number;\n  code: InstructionInstance[];\n}\n","import { Frames } from \"./Frames\";\nimport { InstructionInstance, MethodBody, Type } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { OperandStack } from \"./OperandStack\";\nimport { Value } from \"./runtime\";\nimport { TODO } from \"./utils\";\n\nexport class Frame {\n  get currentInstruction(): InstructionInstance {\n    return this.getInstruction(this.position);\n  }\n  constructor(\n    readonly parent: Frames,\n    readonly name: string,\n    public position: number,\n    readonly args: Value[],\n    readonly methodBody: MethodBody,\n    readonly stack: OperandStack,\n    readonly locals: LocalVariables\n  ) {}\n\n  public next(position?: number): void {\n    if (position) {\n      this.getInstruction(position);\n      this.position = position;\n    } else {\n      const idx = this.methodBody.code.indexOf(this.currentInstruction);\n      this.position = this.methodBody.code[idx + 1].position;\n    }\n  }\n\n  public return(value?: Value): void {\n    if (value) {\n      console.log(\n        `${this.name}(${this.args}) return: [${Type[value.type]}] ${\n          value.value\n        }`\n      );\n    } else {\n      console.log(`${this.name}(${this.args}) return: void`);\n    }\n    this.parent.endFrame(value);\n  }\n\n  private getInstruction(pos: number): InstructionInstance {\n    const res = this.methodBody.code.find(inst => inst.position === pos);\n    if (!res) {\n      throw new Error(`No instruction found with position ${pos}`);\n    }\n    return res;\n  }\n}\n","import { Value } from \"./runtime\";\n\nexport class LocalVariables {\n  private _list: Value[] = [];\n  get list(): Value[] {\n    return this._list;\n  }\n\n  constructor(size: number) {\n    this._list = Array.apply(null, Array<Value>(size));\n  }\n\n  public get(i: number): Value {\n    return this._list[i];\n  }\n\n  public set(i: number, value: Value): void {\n    this._list[i] = value;\n  }\n}\n","import { Type } from \"./input\";\nimport { NativeMethod } from \"./native-methods\";\nimport { Value } from \"./runtime\";\n\nexport interface NativeMethod {\n  args_size: number;\n  call(args: any[]): Value | undefined;\n}\n\nfunction printConsole() {\n  const args = Array.from(arguments);\n  console.log(...args);\n  return;\n}\n\nconst println: NativeMethod = {\n  args_size: 1,\n  call(args: any[]) {\n    // first arg is the java/io/PrintStream\n    const value = args[1];\n    if (value.type && value.value) {\n      alert(`[${Type[value.type]}]: ${value.value}`);\n    } else {\n      alert(JSON.stringify(value));\n    }\n    return undefined;\n  }\n};\n\nexport const nativeMethods = new Map<string, NativeMethod>()\n  .set(\"Method java/io/PrintStream.println:(I)V\", println)\n  .set(\"Method java/io/PrintStream.println:(Ljava/lang/Object;)V\", println);\n","import { Value } from \"./runtime\";\n\ntype MaybeValue = Value | null;\n\nexport class OperandStack {\n  private _list: MaybeValue[];\n  private _position = 0;\n  get list(): MaybeValue[] {\n    return this._list;\n  }\n\n  constructor(size: number) {\n    this._list = Array.apply(null, Array<MaybeValue>(size));\n  }\n\n  public push(value: Value): void {\n    this._list[this._position] = value;\n    this._position++;\n  }\n\n  public pop(): Value {\n    const v = this._list[this._position - 1];\n    this._list[this._position - 1] = null;\n    this._position--;\n    return v as Value;\n  }\n\n  public peek(): Value {\n    const v = this._list[this._position - 1];\n    return v as Value;\n  }\n}\n","import { Frame } from \"./Frame\";\nimport { Constant, MethodBody } from \"./input\";\nimport { LocalVariables } from \"./LocalVariables\";\nimport { nativeMethods } from \"./native-methods\";\nimport { OperandStack } from \"./OperandStack\";\nimport { Value } from \"./runtime\";\nimport { TODO } from \"./utils\";\n\nexport class Frames {\n  public readonly frames: Frame[] = [];\n\n  get currentFrame(): Frame {\n    return this.frames[this.frames.length - 1];\n  }\n\n  constructor(\n    readonly constantPool: Constant[],\n    readonly methods: Map<string, MethodBody>,\n    mainArgs: Value[] = []\n  ) {\n    const mainMethod = methods.get(\"main\");\n    if (!mainMethod) {\n      throw new Error(`'main' method is missing`);\n    }\n    const mainFrame = this.createFrame(\"main\", mainMethod, mainArgs);\n    mainFrame.locals.set(0, mainArgs[0]);\n    this.frames.push(mainFrame);\n  }\n\n  public next() {\n    const currentFrame = this.currentFrame;\n    const { methodBody, position } = currentFrame;\n    const instruction = currentFrame.currentInstruction;\n    instruction.instruction.apply(currentFrame);\n  }\n\n  public callStaticMethod(value: string): void {\n    const nativeMethod = nativeMethods.get(value);\n    if (nativeMethod) {\n      const args = this.getArgs(nativeMethod.args_size);\n      const res = nativeMethod.call(args);\n      if (res) {\n        this.currentFrame.stack.push(res);\n      }\n      this.currentFrame.next();\n    } else {\n      const method = this.getMethod(value);\n      const args = this.getArgs(method.args_size);\n      const frame = this.createFrame(value, method, args);\n      this.frames.push(frame);\n      // bind args to locals\n      const locals = this.currentFrame.locals;\n      args.forEach((arg, index) => locals.set(index, arg));\n    }\n  }\n\n  public callObjectMethod(value: any): void {\n    const nativeMethod = nativeMethods.get(value);\n    if (nativeMethod) {\n      const methodArgs = this.getArgs(nativeMethod.args_size);\n      const objectRef = this.currentFrame.stack.pop();\n      const args = [objectRef, ...methodArgs];\n      const res = nativeMethod.call(args);\n      if (res) {\n        this.currentFrame.stack.push(res);\n      }\n      this.currentFrame.next();\n    } else {\n      const method = this.getMethod(value);\n      const methodArgs = this.getArgs(method.args_size);\n      const objectRef = this.currentFrame.stack.pop();\n      const args = [objectRef, ...methodArgs];\n      const frame = this.createFrame(value, method, args);\n      this.frames.push(frame);\n      // bind args to locals\n      const locals = this.currentFrame.locals;\n      args.forEach((arg, index) => locals.set(index, arg));\n    }\n  }\n\n  public endFrame(value?: Value): void {\n    this.frames.pop();\n    if (value) {\n      this.currentFrame.stack.push(value);\n    }\n    if (this.frames.length === 0) {\n      alert(\"Done\");\n    } else {\n      this.currentFrame.next();\n    }\n  }\n\n  private createFrame(name: string, body: MethodBody, args: Value[]): Frame {\n    return new Frame(\n      this,\n      name,\n      body.code[0].position,\n      args,\n      body,\n      new OperandStack(body.stack),\n      new LocalVariables(body.locals)\n    );\n  }\n\n  private getMethod(m: string): MethodBody {\n    const method = this.methods.get(m);\n    if (!method) {\n      throw new Error(\n        `'${m}' not found, got ${Array.from(this.methods.keys())}`\n      );\n    }\n    return method;\n  }\n\n  private getArgs(size: number): Value[] {\n    const args: Value[] = [];\n    const stack = this.currentFrame.stack;\n    for (let i = 0; i < size; i++) {\n      args.push(stack.pop());\n    }\n    return args;\n  }\n}\n","import { Constant } from \"../../models/input\";\nimport { ConstantPoolParser } from \"../parser\";\n\nconst createConstant = (s: string): Constant => {\n    const regexpConstant = /^\\s*#(\\d+) = ([a-zA-Z0-8]*)\\s+(\\S*)(\\s+\\/\\/\\s(.*))?$/gm;\n    const t = regexpConstant.exec(s);\n    const [all, sIndex, type, v0, rest, v1] = Array.from(t || []);\n    const index = parseInt(sIndex, 10);\n    const value = (v1 ? v1 : v0);\n    return {index, type, value};\n};\n\nexport const constantPoolParser: ConstantPoolParser = {\n    parse(input: string): Constant[] {\n        return input.split(\"\\n\")\n            .map((s) => s.trim())\n            .filter((s) => s !== \"\")\n            .map((s) => createConstant(s));\n    },\n};\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\n\n// return, ireturn\n\nexport const flowInstructions: InstructionBuilder = {};\n\ninterface Comparators {\n  [index: string]: (a: number, b: number) => boolean;\n}\n\nconst comparators: Comparators = {\n  ge: (a: number, b: number): boolean => a >= b,\n  gt: (a: number, b: number): boolean => a > b,\n  le: (a: number, b: number): boolean => a <= b,\n  lt: (a: number, b: number): boolean => a < b,\n  ne: (a: number, b: number): boolean => a !== b\n};\n\nconst typedIfCmp = (\n  type: Type,\n  jump: number,\n  cmp: keyof Comparators\n): Instruction => ({\n  type,\n  code: `if_${typePrefix(type)}cmp${cmp}`,\n  apply: (frame: Frame) => {\n    const b = frame.stack.pop().value as number;\n    const a = frame.stack.pop().value as number;\n    const needJump = comparators[cmp](a, b);\n    frame.next(needJump ? jump : undefined);\n  }\n});\n\nconst gotoLabel = (jump: number): Instruction => ({\n  code: `goto`,\n  apply: (frame: Frame) => {\n    frame.next(jump);\n  }\n});\n\nflowInstructions.goto = (args: any[]) => {\n  const jump = parseInt(args[0], 10);\n  return gotoLabel(jump);\n};\n\nflowInstructions.return = () => ({\n  code: `return`,\n  apply: (frame: Frame) => frame.return()\n});\n\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach(type => {\n  const t = typePrefix(type);\n\n  [\"gt\", \"ge\", \"lt\", \"le\", \"ne\"].forEach(cmp => {\n    flowInstructions[`if_${t}cmp${cmp}`] = (args: any[]) => {\n      const jump = parseInt(args[0], 10);\n      return typedIfCmp(type, jump, cmp);\n    };\n  });\n\n  flowInstructions[`${t}return`] = () => ({\n    type,\n    code: `${t}return`,\n    apply: (frame: Frame) => {\n      const value = frame.stack.pop();\n      frame.return(value);\n    }\n  });\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type, typePrefix } from \"../input\";\nimport { TODO } from \"../utils\";\n\n// imul, iinc\n\nexport const mathInstructions: InstructionBuilder = {};\n\nconst typedBinaryOperation = (type: Type, key: string, ope: (a: number, b: number) => number): Instruction => ({\n    type,\n    code: typePrefix(type) + key,\n    apply: (frame: Frame) => {\n        const a = frame.stack.pop();\n        const b = frame.stack.pop();\n        frame.stack.push({ type, value: ope(a.value, b.value) });\n        frame.next();\n    },\n});\n\nconst typedUnaryOperation = (type: Type, key: string, ope: (a: number) => number): Instruction => ({\n    type,\n    code: typePrefix(type) + key,\n    apply: (frame: Frame) => {\n        const a = frame.stack.pop();\n        const b = frame.stack.pop();\n        frame.stack.push({ type, value: ope(a.value) });\n        frame.next();\n    },\n});\n\nconst incr = (index: number, increment: number): Instruction => ({\n    type: Type.Int,\n    code: \"iinc\",\n    apply: (frame: Frame) => {\n        const { type, value } = frame.locals.get(index);\n        frame.locals.set(index, { type, value: value + increment });\n        frame.next();\n    },\n});\n\n// Arithmetic\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach((type) => {\n    const t = typePrefix(type);\n\n    mathInstructions[`${t}add`] = () => typedBinaryOperation(type, \"add\", (a, b) => a + b);\n    mathInstructions[`${t}sub`] = () => typedBinaryOperation(type, \"sub\", (a, b) => a - b);\n    mathInstructions[`${t}mul`] = () => typedBinaryOperation(type, \"mul\", (a, b) => a * b);\n    mathInstructions[`${t}div`] = () => typedBinaryOperation(type, \"rem\", (a, b) => a % b);\n    mathInstructions[`${t}neg`] = () => typedUnaryOperation(type, \"neg\", (a) => - a);\n\n    mathInstructions.iinc = (args: any[]) => {\n        const index = parseInt(args[0], 10);\n        const increment = parseInt(args[1], 10);\n        return incr(index, increment);\n    };\n\n});\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder, Type } from \"../input\";\n\nexport const objectsInstructions: InstructionBuilder = {};\n\nobjectsInstructions.getstatic = (args: any[]) => ({\n  code: \"getstatic\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.stack.push({ type: Type.Constant, value });\n    frame.next();\n  }\n});\n\nobjectsInstructions.invokestatic = (args: any[]) => ({\n  code: \"invokestatic\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.parent.callStaticMethod(value);\n  }\n});\n\nobjectsInstructions.invokevirtual = (args: any[]) => ({\n  code: \"invokevirtual\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.parent.callObjectMethod(value);\n  }\n});\n\n// new, invokespecial, putfield, getfield\n","import { Frame } from \"../Frame\";\nimport { Instruction, InstructionBuilder } from \"../input\";\n\n//\n\nexport const otherInstructions: InstructionBuilder = {};\n","import { Frame } from \"../Frame\";\nimport {\n  Constant,\n  Instruction,\n  InstructionBuilder,\n  Type,\n  typePrefix\n} from \"../input\";\n\nexport const stackInstructions: InstructionBuilder = {};\n\nconst typedConst = (type: Type, value: any): Instruction => ({\n  type,\n  code: `${typePrefix(type)}const_${value}`,\n  apply: (frame: Frame) => {\n    frame.stack.push({ type, value });\n    frame.next();\n  }\n});\n\nconst typedStore = (type: Type, index: number): Instruction => ({\n  type,\n  code: `${typePrefix(type)}store_${index}`,\n  apply: (frame: Frame) => {\n    const value = frame.stack.pop();\n    frame.locals.set(index, value);\n    frame.next();\n  }\n});\n\nconst typedLoad = (type: Type, index: number): Instruction => ({\n  type,\n  code: `${typePrefix(type)}load_${index}`,\n  apply: (frame: Frame) => {\n    const value = frame.locals.get(index);\n    frame.stack.push(value);\n    frame.next();\n  }\n});\n\n// Typed const, store, load\n[Type.Int, Type.Long, Type.Float, Type.Double].forEach(type => {\n  const t = typePrefix(type);\n\n  for (let i = 0; i < 6; i++) {\n    stackInstructions[`${t}const_${i}`] = () => typedConst(type, i);\n  }\n  for (let i = 0; i < 4; i++) {\n    stackInstructions[`${t}store_${i}`] = () => typedStore(type, i);\n    stackInstructions[`${t}load_${i}`] = () => typedLoad(type, i);\n  }\n});\n\nstackInstructions.iconst_m1 = () => typedConst(Type.Int, -1);\n\nstackInstructions.ldc = (args: any[]): Instruction => ({\n  code: \"ldc\",\n  apply: (frame: Frame) => {\n    const value = args[0];\n    frame.stack.push({ type: Type.Constant, value });\n    frame.next();\n  }\n});\n\n// dup, Tstore, Tload, bipush, putstatic, aastore\n","import { Instruction, InstructionBuilder } from \"../input\";\nimport { flowInstructions } from \"./flow\";\nimport { mathInstructions } from \"./math\";\nimport { objectsInstructions } from \"./objects\";\nimport { otherInstructions } from \"./others\";\nimport { stackInstructions } from \"./stacks\";\n\nconst allInstructions: InstructionBuilder = {\n    ...stackInstructions,\n    ...objectsInstructions,\n    ...mathInstructions,\n    ...flowInstructions,\n    ...otherInstructions,\n};\n\nconsole.log(`Got ${Object.keys(allInstructions).length} instructions`);\n\nexport const lookupInstruction = (opscode: string, args: any[]): Instruction => {\n    const i = allInstructions[opscode];\n    if (i) {\n        return i(args);\n    }\n\n    throw new Error(`Opscode ${opscode} not found !`);\n};\n","import { Constant, InstructionInstance, MethodBody } from \"../../models/input\";\nimport { lookupInstruction } from \"../../models/instructions\";\nimport { Value } from \"../../models/runtime\";\nimport { TODO } from \"../../models/utils\";\nimport { MethodParser } from \"../parser\";\n\nclass MethodBodyImpl implements MethodBody {\n  constructor(\n    readonly stack: number,\n    readonly locals: number,\n    readonly args_size: number,\n    readonly code: InstructionInstance[]\n  ) {}\n}\n\nconst createInstruction = (line: string): InstructionInstance => {\n  const regexpInstruction1 = /^\\s*(\\d+): ([a-z0-9_]*)\\s+(\\S*)\\s+\\/\\/\\s(.*)$/gm;\n  const t1 = regexpInstruction1.exec(line);\n  if (t1 !== null) {\n    const [all, sIndex, opscode, v0, v1] = Array.from(t1 || []);\n    const position = parseInt(sIndex, 10);\n    const args = v0 && v1 ? [v1] : v0 ? [v0] : [];\n    const instruction = lookupInstruction(opscode, args);\n    return { position, instruction, args };\n  }\n\n  const regexpInstruction2 = /^\\s*(\\d+): ([a-z0-9_]*)(\\s+([\\d, ]*))?$/gm;\n  const t2 = regexpInstruction2.exec(line);\n  if (t2 !== null) {\n    const [all, sIndex, opscode, v0, v1] = Array.from(t2 || []);\n    const position = parseInt(sIndex, 10);\n    const args = v1 ? (v1 as string).split(\", \") : [];\n    const instruction = lookupInstruction(opscode, args);\n    return { position, instruction, args };\n  }\n\n  throw new Error(`Cannot parse line ${line}`);\n};\n\nexport const methodParser: MethodParser = {\n  parse(\n    constantPool: Constant[],\n    stack: number,\n    locals: number,\n    args_size: number,\n    input: string\n  ) {\n    const code = input\n      .split(\"\\n\")\n      .map(s => s.trim())\n      .filter(s => s !== \"\")\n      .map(s => createInstruction(s));\n\n    return new MethodBodyImpl(stack, locals, args_size, code);\n  }\n};\n","import { MethodBody } from \"./../models/input\";\nimport { constantPoolParser } from \"./impl/constant-parser\";\nimport { methodParser } from \"./impl/instruction-parser\";\n\nconst consts = `#1 = Methodref          #6.#18         // java/lang/Object.\"<init>\":()V\n   #2 = Fieldref           #19.#20        // java/lang/System.out:Ljava/io/PrintStream;\n   #3 = Methodref          #5.#21         // _01_factorial/Factorial.factorial:(I)I\n   #4 = Methodref          #22.#23        // java/io/PrintStream.println:(I)V\n   #5 = Class              #24            // _01_factorial/Factorial\n   #6 = Class              #25            // java/lang/Object\n   #7 = Utf8               <init>\n   #8 = Utf8               ()V\n   #9 = Utf8               Code\n  #10 = Utf8               LineNumberTable\n  #11 = Utf8               plop\n  #12 = Utf8               (I)I\n  #13 = Utf8               StackMapTable\n  #14 = Utf8               main\n  #15 = Utf8               ([Ljava/lang/String;)V\n  #16 = Utf8               SourceFile\n  #17 = Utf8               Plop.java\n  #18 = NameAndType        #7:#8          // \"<init>\":()V\n  #19 = Class              #26            // java/lang/System\n  #20 = NameAndType        #27:#28        // out:Ljava/io/PrintStream;\n  #21 = NameAndType        #11:#12        // plop:(I)I\n  #22 = Class              #29            // java/io/PrintStream\n  #23 = NameAndType        #30:#31        // println:(I)V\n  #24 = Utf8               _01_plop/Plop\n  #25 = Utf8               java/lang/Object\n  #26 = Utf8               java/lang/System\n  #27 = Utf8               out\n  #28 = Utf8               Ljava/io/PrintStream;\n  #29 = Utf8               java/io/PrintStream\n  #30 = Utf8               println\n  #31 = Utf8               (I)V`;\n\nconst factorialCode = `0: iconst_1\n1: istore_1\n2: iconst_2\n3: istore_2\n4: iload_2\n5: iload_0\n6: if_icmpgt     19\n9: iload_1\n10: iload_2\n11: imul\n12: istore_1\n13: iinc          2, 1\n16: goto          4\n19: iload_1\n20: ireturn`;\n\nconst mainCode = ` 0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n3: iconst_5\n4: invokestatic  #3                  // Method plop:(I)I\n7: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V\n10: return`;\n\nexport const constantPool = constantPoolParser.parse(consts);\n\nexport const sample = new Map<string, MethodBody>()\n  .set(\n    \"Method plop:(I)I\",\n    methodParser.parse(constantPool, 2, 3, 1, factorialCode)\n  )\n  .set(\"main\", methodParser.parse(constantPool, 2, 1, 1, mainCode));\n","import { Constant, Instruction, InstructionInstance } from \"./../models/input\";\n\nexport const renderConstantPool = (constantPool: Constant[]): string => `\n<details>\n    <summary>Constant Pool</summary>\n    <div class=\"constants\">\n      ${\n  constantPool.map((constant) => `\n        <div class=\"index\">${constant.index}</div>\n        <div class=\"type\">${constant.type}</div>\n        <div class=\"value\">${constant.value}</div>\n        `).join(\"\\n\")\n  }\n    </div>\n</details>\n`;\n\n// FIXME Frame, stack, locals, ... current step\nexport const renderMethodCode = (code: InstructionInstance[], position: number): string => {\n  const classes = (inst: InstructionInstance) => ([\n    inst.instruction.type ? `inst-${inst.instruction.type}` : \"\",\n    position === inst.position ? \"selected\" : \"\",\n  ].filter((s) => s !== \"\").join(\" \"));\n  return `\n<ul class=\"code\">\n  ${\n    code.map((inst) => `\n  <li class=\"${classes(inst)}\">\n    <div class=\"position\">${inst.position}</div>\n    <div class=\"code\">${inst.instruction.code}</div>\n    <div class=\"args\">${inst.args}</div>\n\n  </li>\n    `).join(\"\\n\")\n    }\n</ul>\n`;\n};\n","import { Value } from \"../models/runtime\";\nimport { LocalVariables } from \"./../models/LocalVariables\";\n\nconst renderLocalValue = (value: Value | null): string =>\n    value ? `<div class=\"type-${value.type}\" title=\"${value.value}\">${value.value}</div>` :\n        `<div class=\"empty\"></div>`;\n\nexport const renderLocals = (locals: LocalVariables): string => `\n<div class=\"locals\">\n    <header>Locals</header>\n    <div>\n        ${locals.list.map(renderLocalValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { OperandStack } from \"../models/OperandStack\";\nimport { Value } from \"../models/runtime\";\n\nconst renderStackValue = (value: Value | null): string =>\n    value ? `<div class=\"type-${value.type}\" title=\"${value.value}\">${value.value}</div>` :\n        `<div class=\"empty\"></div>`;\n\nexport const renderStack = (stack: OperandStack): string => `\n<div class=\"stack\">\n    <header>Stack</header>\n    <div>\n        ${stack.list.map(renderStackValue).join(\"\\n\")}\n    </div>\n</div>\n`;\n","import { Frame } from \"../models/Frame\";\nimport { Frames } from \"../models/Frames\";\nimport { Value } from \"../models/runtime\";\nimport { renderConstantPool, renderMethodCode } from \"./inputs\";\nimport { renderLocals } from \"./locals\";\nimport { renderStack } from \"./stack\";\n\nconst renderArgs = (args: Value[]): string =>\n  `<span class=\"args\">${args\n    .map(({ type, value }) => `<span class=\"type-${type}\">${value}</span>`)\n    .join(\"\")}</span>`;\n\nconst renderFrame = (frame: Frame, current: boolean): string => `\n<article class=\"frame ${current ? \"current\" : \"\"}\">\n  <header>${frame.name} ${renderArgs(frame.args)}</header>\n  ${renderMethodCode(frame.methodBody.code, frame.position)}\n  ${renderStack(frame.stack)}\n  ${renderLocals(frame.locals)}\n</article>\n`;\n\nexport const renderFrames = (frames: Frames): string => `\n${renderConstantPool(frames.constantPool)}\n<details open class=\"frames\">\n    <summary>Frames</summary>\n    <menu>\n      ${\n        frames.frames.length > 0\n          ? `<button type=\"button\" class=\"next\">↩️ Next</button>`\n          : ``\n      }\n    </menu>\n    <div>\n      ${frames.frames\n        .map(frame => renderFrame(frame, frame === frames.currentFrame))\n        .join(\"\\n\")}\n    </div>\n</details>\n`;\n","import { MethodBody } from \"./models/input\";\nimport { OperandStack } from \"./models/OperandStack\";\n\nimport { Frame } from \"./models/Frame\";\nimport { Frames } from \"./models/Frames\";\nimport { LocalVariables } from \"./models/LocalVariables\";\nimport { constantPool, sample } from \"./parser/sample\";\nimport { renderFrames } from \"./templates/frame\";\n\nconst frames = new Frames(constantPool, sample);\n\nexport const catnip = (elt: HTMLElement | null): void => {\n  if (elt !== null) {\n    elt.innerHTML = renderFrames(frames);\n    const btn = document.querySelector(\n      \".frames menu .next\"\n    ) as HTMLButtonElement;\n    if (btn) {\n      btn.onclick = () => {\n        frames.next();\n        catnip(elt);\n      };\n    }\n  } else {\n    console.warn(\"Cannot mount element:\", elt);\n  }\n};\n\nwindow.catnip = catnip;\n"]}